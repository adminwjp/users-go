// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/adminwjp/users-go/rpcs/gen-go/users"
)

var _ = users.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  UserOuputThrift login(UserInputThrift user)")
  fmt.Fprintln(os.Stderr, "  UserOuputThrift login_by_phone(UserPhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  UserOuputThrift login_by_email(UserEmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  UserOuputThrift login_by_user_name(UserUserNameInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register1(UserInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_phone(UserPhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_email(UserEmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_user_name(UserUserNameInputThrift user)")
  fmt.Fprintln(os.Stderr, "  UserOuputThrift get(IdThrift user)")
  fmt.Fprintln(os.Stderr, "  UpdateAuthBasicInputThrift get_auth_basic(IdThrift user)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_phone(UpdatePhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_email(UpdateEmailInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_email_by_phone(UpdateEmailByPhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_pwd_by_phone(UpdatePwdByPhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_pwd_by_email(UpdatePwdByEmailInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_auth_basic(UpdateAuthBasicInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists(AccountInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_phone(PhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_email(EmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_user_name(UserNameInputThrift user)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := users.NewUserThriftServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Login requires 1 args")
      flag.Usage()
    }
    arg82 := flag.Arg(1)
    mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
    defer mbTrans83.Close()
    _, err84 := mbTrans83.WriteString(arg82)
    if err84 != nil {
      Usage()
      return
    }
    factory85 := thrift.NewTJSONProtocolFactory()
    jsProt86 := factory85.GetProtocol(mbTrans83)
    argvalue0 := users.NewUserInputThrift()
    err87 := argvalue0.Read(context.Background(), jsProt86)
    if err87 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Login(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByPhone requires 1 args")
      flag.Usage()
    }
    arg88 := flag.Arg(1)
    mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
    defer mbTrans89.Close()
    _, err90 := mbTrans89.WriteString(arg88)
    if err90 != nil {
      Usage()
      return
    }
    factory91 := thrift.NewTJSONProtocolFactory()
    jsProt92 := factory91.GetProtocol(mbTrans89)
    argvalue0 := users.NewUserPhoneInputThrift()
    err93 := argvalue0.Read(context.Background(), jsProt92)
    if err93 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByEmail requires 1 args")
      flag.Usage()
    }
    arg94 := flag.Arg(1)
    mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
    defer mbTrans95.Close()
    _, err96 := mbTrans95.WriteString(arg94)
    if err96 != nil {
      Usage()
      return
    }
    factory97 := thrift.NewTJSONProtocolFactory()
    jsProt98 := factory97.GetProtocol(mbTrans95)
    argvalue0 := users.NewUserEmailInputThrift()
    err99 := argvalue0.Read(context.Background(), jsProt98)
    if err99 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByUserName requires 1 args")
      flag.Usage()
    }
    arg100 := flag.Arg(1)
    mbTrans101 := thrift.NewTMemoryBufferLen(len(arg100))
    defer mbTrans101.Close()
    _, err102 := mbTrans101.WriteString(arg100)
    if err102 != nil {
      Usage()
      return
    }
    factory103 := thrift.NewTJSONProtocolFactory()
    jsProt104 := factory103.GetProtocol(mbTrans101)
    argvalue0 := users.NewUserUserNameInputThrift()
    err105 := argvalue0.Read(context.Background(), jsProt104)
    if err105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Register1 requires 1 args")
      flag.Usage()
    }
    arg106 := flag.Arg(1)
    mbTrans107 := thrift.NewTMemoryBufferLen(len(arg106))
    defer mbTrans107.Close()
    _, err108 := mbTrans107.WriteString(arg106)
    if err108 != nil {
      Usage()
      return
    }
    factory109 := thrift.NewTJSONProtocolFactory()
    jsProt110 := factory109.GetProtocol(mbTrans107)
    argvalue0 := users.NewUserInputThrift()
    err111 := argvalue0.Read(context.Background(), jsProt110)
    if err111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Register1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByPhone requires 1 args")
      flag.Usage()
    }
    arg112 := flag.Arg(1)
    mbTrans113 := thrift.NewTMemoryBufferLen(len(arg112))
    defer mbTrans113.Close()
    _, err114 := mbTrans113.WriteString(arg112)
    if err114 != nil {
      Usage()
      return
    }
    factory115 := thrift.NewTJSONProtocolFactory()
    jsProt116 := factory115.GetProtocol(mbTrans113)
    argvalue0 := users.NewUserPhoneInputThrift()
    err117 := argvalue0.Read(context.Background(), jsProt116)
    if err117 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByEmail requires 1 args")
      flag.Usage()
    }
    arg118 := flag.Arg(1)
    mbTrans119 := thrift.NewTMemoryBufferLen(len(arg118))
    defer mbTrans119.Close()
    _, err120 := mbTrans119.WriteString(arg118)
    if err120 != nil {
      Usage()
      return
    }
    factory121 := thrift.NewTJSONProtocolFactory()
    jsProt122 := factory121.GetProtocol(mbTrans119)
    argvalue0 := users.NewUserEmailInputThrift()
    err123 := argvalue0.Read(context.Background(), jsProt122)
    if err123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByUserName requires 1 args")
      flag.Usage()
    }
    arg124 := flag.Arg(1)
    mbTrans125 := thrift.NewTMemoryBufferLen(len(arg124))
    defer mbTrans125.Close()
    _, err126 := mbTrans125.WriteString(arg124)
    if err126 != nil {
      Usage()
      return
    }
    factory127 := thrift.NewTJSONProtocolFactory()
    jsProt128 := factory127.GetProtocol(mbTrans125)
    argvalue0 := users.NewUserUserNameInputThrift()
    err129 := argvalue0.Read(context.Background(), jsProt128)
    if err129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg130 := flag.Arg(1)
    mbTrans131 := thrift.NewTMemoryBufferLen(len(arg130))
    defer mbTrans131.Close()
    _, err132 := mbTrans131.WriteString(arg130)
    if err132 != nil {
      Usage()
      return
    }
    factory133 := thrift.NewTJSONProtocolFactory()
    jsProt134 := factory133.GetProtocol(mbTrans131)
    argvalue0 := users.NewIdThrift()
    err135 := argvalue0.Read(context.Background(), jsProt134)
    if err135 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_auth_basic":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAuthBasic requires 1 args")
      flag.Usage()
    }
    arg136 := flag.Arg(1)
    mbTrans137 := thrift.NewTMemoryBufferLen(len(arg136))
    defer mbTrans137.Close()
    _, err138 := mbTrans137.WriteString(arg136)
    if err138 != nil {
      Usage()
      return
    }
    factory139 := thrift.NewTJSONProtocolFactory()
    jsProt140 := factory139.GetProtocol(mbTrans137)
    argvalue0 := users.NewIdThrift()
    err141 := argvalue0.Read(context.Background(), jsProt140)
    if err141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAuthBasic(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePhone requires 1 args")
      flag.Usage()
    }
    arg142 := flag.Arg(1)
    mbTrans143 := thrift.NewTMemoryBufferLen(len(arg142))
    defer mbTrans143.Close()
    _, err144 := mbTrans143.WriteString(arg142)
    if err144 != nil {
      Usage()
      return
    }
    factory145 := thrift.NewTJSONProtocolFactory()
    jsProt146 := factory145.GetProtocol(mbTrans143)
    argvalue0 := users.NewUpdatePhoneInputThrift()
    err147 := argvalue0.Read(context.Background(), jsProt146)
    if err147 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEmail requires 1 args")
      flag.Usage()
    }
    arg148 := flag.Arg(1)
    mbTrans149 := thrift.NewTMemoryBufferLen(len(arg148))
    defer mbTrans149.Close()
    _, err150 := mbTrans149.WriteString(arg148)
    if err150 != nil {
      Usage()
      return
    }
    factory151 := thrift.NewTJSONProtocolFactory()
    jsProt152 := factory151.GetProtocol(mbTrans149)
    argvalue0 := users.NewUpdateEmailInputThrift()
    err153 := argvalue0.Read(context.Background(), jsProt152)
    if err153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_email_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEmailByPhone requires 1 args")
      flag.Usage()
    }
    arg154 := flag.Arg(1)
    mbTrans155 := thrift.NewTMemoryBufferLen(len(arg154))
    defer mbTrans155.Close()
    _, err156 := mbTrans155.WriteString(arg154)
    if err156 != nil {
      Usage()
      return
    }
    factory157 := thrift.NewTJSONProtocolFactory()
    jsProt158 := factory157.GetProtocol(mbTrans155)
    argvalue0 := users.NewUpdateEmailByPhoneInputThrift()
    err159 := argvalue0.Read(context.Background(), jsProt158)
    if err159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEmailByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_pwd_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePwdByPhone requires 1 args")
      flag.Usage()
    }
    arg160 := flag.Arg(1)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil {
      Usage()
      return
    }
    factory163 := thrift.NewTJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    argvalue0 := users.NewUpdatePwdByPhoneInputThrift()
    err165 := argvalue0.Read(context.Background(), jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePwdByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_pwd_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePwdByEmail requires 1 args")
      flag.Usage()
    }
    arg166 := flag.Arg(1)
    mbTrans167 := thrift.NewTMemoryBufferLen(len(arg166))
    defer mbTrans167.Close()
    _, err168 := mbTrans167.WriteString(arg166)
    if err168 != nil {
      Usage()
      return
    }
    factory169 := thrift.NewTJSONProtocolFactory()
    jsProt170 := factory169.GetProtocol(mbTrans167)
    argvalue0 := users.NewUpdatePwdByEmailInputThrift()
    err171 := argvalue0.Read(context.Background(), jsProt170)
    if err171 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePwdByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_auth_basic":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateAuthBasic requires 1 args")
      flag.Usage()
    }
    arg172 := flag.Arg(1)
    mbTrans173 := thrift.NewTMemoryBufferLen(len(arg172))
    defer mbTrans173.Close()
    _, err174 := mbTrans173.WriteString(arg172)
    if err174 != nil {
      Usage()
      return
    }
    factory175 := thrift.NewTJSONProtocolFactory()
    jsProt176 := factory175.GetProtocol(mbTrans173)
    argvalue0 := users.NewUpdateAuthBasicInputThrift()
    err177 := argvalue0.Read(context.Background(), jsProt176)
    if err177 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateAuthBasic(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Exists requires 1 args")
      flag.Usage()
    }
    arg178 := flag.Arg(1)
    mbTrans179 := thrift.NewTMemoryBufferLen(len(arg178))
    defer mbTrans179.Close()
    _, err180 := mbTrans179.WriteString(arg178)
    if err180 != nil {
      Usage()
      return
    }
    factory181 := thrift.NewTJSONProtocolFactory()
    jsProt182 := factory181.GetProtocol(mbTrans179)
    argvalue0 := users.NewAccountInputThrift()
    err183 := argvalue0.Read(context.Background(), jsProt182)
    if err183 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Exists(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsPhone requires 1 args")
      flag.Usage()
    }
    arg184 := flag.Arg(1)
    mbTrans185 := thrift.NewTMemoryBufferLen(len(arg184))
    defer mbTrans185.Close()
    _, err186 := mbTrans185.WriteString(arg184)
    if err186 != nil {
      Usage()
      return
    }
    factory187 := thrift.NewTJSONProtocolFactory()
    jsProt188 := factory187.GetProtocol(mbTrans185)
    argvalue0 := users.NewPhoneInputThrift()
    err189 := argvalue0.Read(context.Background(), jsProt188)
    if err189 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsEmail requires 1 args")
      flag.Usage()
    }
    arg190 := flag.Arg(1)
    mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
    defer mbTrans191.Close()
    _, err192 := mbTrans191.WriteString(arg190)
    if err192 != nil {
      Usage()
      return
    }
    factory193 := thrift.NewTJSONProtocolFactory()
    jsProt194 := factory193.GetProtocol(mbTrans191)
    argvalue0 := users.NewEmailInputThrift()
    err195 := argvalue0.Read(context.Background(), jsProt194)
    if err195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsUserName requires 1 args")
      flag.Usage()
    }
    arg196 := flag.Arg(1)
    mbTrans197 := thrift.NewTMemoryBufferLen(len(arg196))
    defer mbTrans197.Close()
    _, err198 := mbTrans197.WriteString(arg196)
    if err198 != nil {
      Usage()
      return
    }
    factory199 := thrift.NewTJSONProtocolFactory()
    jsProt200 := factory199.GetProtocol(mbTrans197)
    argvalue0 := users.NewUserNameInputThrift()
    err201 := argvalue0.Read(context.Background(), jsProt200)
    if err201 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
