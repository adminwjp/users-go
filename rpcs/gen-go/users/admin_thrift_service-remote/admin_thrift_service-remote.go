// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/adminwjp/users-go/rpcs/gen-go/users"
)

var _ = users.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AdminOuputThrift login(UserInputThrift user)")
  fmt.Fprintln(os.Stderr, "  AdminOuputThrift login_by_phone(UserPhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  AdminOuputThrift login_by_email(UserEmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  AdminOuputThrift login_by_user_name(UserUserNameInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register1(UserInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_phone(UserPhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_email(UserEmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  IdThrift register_by_user_name(UserUserNameInputThrift user)")
  fmt.Fprintln(os.Stderr, "  AdminOuputThrift get(IdThrift user)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_phone(UpdatePhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_email(UpdateEmailInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_email_by_phone(UpdateEmailByPhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_pwd_by_phone(UpdatePwdByPhoneInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_pwd_by_email(UpdatePwdByEmailInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ResultOuputThrift update_pwd(UpdatePwdInputThrift update)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists(AccountInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_phone(PhoneInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_email(EmailInputThrift user)")
  fmt.Fprintln(os.Stderr, "  ExistsOuputThrift exists_user_name(UserNameInputThrift user)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := users.NewAdminThriftServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Login requires 1 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := users.NewUserInputThrift()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Login(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByPhone requires 1 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := users.NewUserPhoneInputThrift()
    err291 := argvalue0.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByEmail requires 1 args")
      flag.Usage()
    }
    arg292 := flag.Arg(1)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue0 := users.NewUserEmailInputThrift()
    err297 := argvalue0.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "login_by_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginByUserName requires 1 args")
      flag.Usage()
    }
    arg298 := flag.Arg(1)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue0 := users.NewUserUserNameInputThrift()
    err303 := argvalue0.Read(context.Background(), jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginByUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Register1 requires 1 args")
      flag.Usage()
    }
    arg304 := flag.Arg(1)
    mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil {
      Usage()
      return
    }
    factory307 := thrift.NewTJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    argvalue0 := users.NewUserInputThrift()
    err309 := argvalue0.Read(context.Background(), jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Register1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByPhone requires 1 args")
      flag.Usage()
    }
    arg310 := flag.Arg(1)
    mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewTJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue0 := users.NewUserPhoneInputThrift()
    err315 := argvalue0.Read(context.Background(), jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByEmail requires 1 args")
      flag.Usage()
    }
    arg316 := flag.Arg(1)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue0 := users.NewUserEmailInputThrift()
    err321 := argvalue0.Read(context.Background(), jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "register_by_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterByUserName requires 1 args")
      flag.Usage()
    }
    arg322 := flag.Arg(1)
    mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewTJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue0 := users.NewUserUserNameInputThrift()
    err327 := argvalue0.Read(context.Background(), jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterByUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg328 := flag.Arg(1)
    mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
    defer mbTrans329.Close()
    _, err330 := mbTrans329.WriteString(arg328)
    if err330 != nil {
      Usage()
      return
    }
    factory331 := thrift.NewTJSONProtocolFactory()
    jsProt332 := factory331.GetProtocol(mbTrans329)
    argvalue0 := users.NewIdThrift()
    err333 := argvalue0.Read(context.Background(), jsProt332)
    if err333 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePhone requires 1 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewTJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := users.NewUpdatePhoneInputThrift()
    err339 := argvalue0.Read(context.Background(), jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEmail requires 1 args")
      flag.Usage()
    }
    arg340 := flag.Arg(1)
    mbTrans341 := thrift.NewTMemoryBufferLen(len(arg340))
    defer mbTrans341.Close()
    _, err342 := mbTrans341.WriteString(arg340)
    if err342 != nil {
      Usage()
      return
    }
    factory343 := thrift.NewTJSONProtocolFactory()
    jsProt344 := factory343.GetProtocol(mbTrans341)
    argvalue0 := users.NewUpdateEmailInputThrift()
    err345 := argvalue0.Read(context.Background(), jsProt344)
    if err345 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_email_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEmailByPhone requires 1 args")
      flag.Usage()
    }
    arg346 := flag.Arg(1)
    mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewTJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue0 := users.NewUpdateEmailByPhoneInputThrift()
    err351 := argvalue0.Read(context.Background(), jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEmailByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_pwd_by_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePwdByPhone requires 1 args")
      flag.Usage()
    }
    arg352 := flag.Arg(1)
    mbTrans353 := thrift.NewTMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil {
      Usage()
      return
    }
    factory355 := thrift.NewTJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    argvalue0 := users.NewUpdatePwdByPhoneInputThrift()
    err357 := argvalue0.Read(context.Background(), jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePwdByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_pwd_by_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePwdByEmail requires 1 args")
      flag.Usage()
    }
    arg358 := flag.Arg(1)
    mbTrans359 := thrift.NewTMemoryBufferLen(len(arg358))
    defer mbTrans359.Close()
    _, err360 := mbTrans359.WriteString(arg358)
    if err360 != nil {
      Usage()
      return
    }
    factory361 := thrift.NewTJSONProtocolFactory()
    jsProt362 := factory361.GetProtocol(mbTrans359)
    argvalue0 := users.NewUpdatePwdByEmailInputThrift()
    err363 := argvalue0.Read(context.Background(), jsProt362)
    if err363 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePwdByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_pwd":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePwd requires 1 args")
      flag.Usage()
    }
    arg364 := flag.Arg(1)
    mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil {
      Usage()
      return
    }
    factory367 := thrift.NewTJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    argvalue0 := users.NewUpdatePwdInputThrift()
    err369 := argvalue0.Read(context.Background(), jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePwd(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Exists requires 1 args")
      flag.Usage()
    }
    arg370 := flag.Arg(1)
    mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
    defer mbTrans371.Close()
    _, err372 := mbTrans371.WriteString(arg370)
    if err372 != nil {
      Usage()
      return
    }
    factory373 := thrift.NewTJSONProtocolFactory()
    jsProt374 := factory373.GetProtocol(mbTrans371)
    argvalue0 := users.NewAccountInputThrift()
    err375 := argvalue0.Read(context.Background(), jsProt374)
    if err375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Exists(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_phone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsPhone requires 1 args")
      flag.Usage()
    }
    arg376 := flag.Arg(1)
    mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil {
      Usage()
      return
    }
    factory379 := thrift.NewTJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    argvalue0 := users.NewPhoneInputThrift()
    err381 := argvalue0.Read(context.Background(), jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_email":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsEmail requires 1 args")
      flag.Usage()
    }
    arg382 := flag.Arg(1)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil {
      Usage()
      return
    }
    factory385 := thrift.NewTJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    argvalue0 := users.NewEmailInputThrift()
    err387 := argvalue0.Read(context.Background(), jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exists_user_name":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExistsUserName requires 1 args")
      flag.Usage()
    }
    arg388 := flag.Arg(1)
    mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
    defer mbTrans389.Close()
    _, err390 := mbTrans389.WriteString(arg388)
    if err390 != nil {
      Usage()
      return
    }
    factory391 := thrift.NewTJSONProtocolFactory()
    jsProt392 := factory391.GetProtocol(mbTrans389)
    argvalue0 := users.NewUserNameInputThrift()
    err393 := argvalue0.Read(context.Background(), jsProt392)
    if err393 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExistsUserName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
