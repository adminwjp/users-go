// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package users

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// 根据手机号、邮箱、用户名注册 或 登录实体
// 
// Attributes:
//  - Account
//  - Pwd
//  - Flag
type UserInputThrift struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
  Flag int32 `thrift:"flag,3" db:"flag" json:"flag"`
}

func NewUserInputThrift() *UserInputThrift {
  return &UserInputThrift{}
}


func (p *UserInputThrift) GetAccount() string {
  return p.Account
}

func (p *UserInputThrift) GetPwd() string {
  return p.Pwd
}

func (p *UserInputThrift) GetFlag() int32 {
  return p.Flag
}
func (p *UserInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *UserInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UserInputThrift)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *UserInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *UserInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UserInputThrift) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *UserInputThrift) Equals(other *UserInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Account != other.Account { return false }
  if p.Pwd != other.Pwd { return false }
  if p.Flag != other.Flag { return false }
  return true
}

func (p *UserInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserInputThrift(%+v)", *p)
}

// 根据手机号注册 或 登录实体
// 
// Attributes:
//  - Phone
//  - Pwd
type UserPhoneInputThrift struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewUserPhoneInputThrift() *UserPhoneInputThrift {
  return &UserPhoneInputThrift{}
}


func (p *UserPhoneInputThrift) GetPhone() string {
  return p.Phone
}

func (p *UserPhoneInputThrift) GetPwd() string {
  return p.Pwd
}
func (p *UserPhoneInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserPhoneInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UserPhoneInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UserPhoneInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserPhoneInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserPhoneInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *UserPhoneInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UserPhoneInputThrift) Equals(other *UserPhoneInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Phone != other.Phone { return false }
  if p.Pwd != other.Pwd { return false }
  return true
}

func (p *UserPhoneInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserPhoneInputThrift(%+v)", *p)
}

// 根据邮箱注册 或 登录实体
// 
// Attributes:
//  - Email
//  - Pwd
type UserEmailInputThrift struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewUserEmailInputThrift() *UserEmailInputThrift {
  return &UserEmailInputThrift{}
}


func (p *UserEmailInputThrift) GetEmail() string {
  return p.Email
}

func (p *UserEmailInputThrift) GetPwd() string {
  return p.Pwd
}
func (p *UserEmailInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserEmailInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UserEmailInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UserEmailInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserEmailInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserEmailInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *UserEmailInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UserEmailInputThrift) Equals(other *UserEmailInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Email != other.Email { return false }
  if p.Pwd != other.Pwd { return false }
  return true
}

func (p *UserEmailInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserEmailInputThrift(%+v)", *p)
}

// 根据用户名注册 或 登录实体
// 
// Attributes:
//  - UserName
//  - Pwd
type UserUserNameInputThrift struct {
  UserName string `thrift:"user_name,1" db:"user_name" json:"user_name"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewUserUserNameInputThrift() *UserUserNameInputThrift {
  return &UserUserNameInputThrift{}
}


func (p *UserUserNameInputThrift) GetUserName() string {
  return p.UserName
}

func (p *UserUserNameInputThrift) GetPwd() string {
  return p.Pwd
}
func (p *UserUserNameInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserUserNameInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *UserUserNameInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UserUserNameInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserUserNameInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserUserNameInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_name: ", p), err) }
  return err
}

func (p *UserUserNameInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UserUserNameInputThrift) Equals(other *UserUserNameInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserName != other.UserName { return false }
  if p.Pwd != other.Pwd { return false }
  return true
}

func (p *UserUserNameInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserUserNameInputThrift(%+v)", *p)
}

// 根据手机号修改手机号
// 
// Attributes:
//  - Phone
//  - NewPhone_
type UpdatePhoneInputThrift struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  NewPhone_ string `thrift:"new_phone,2" db:"new_phone" json:"new_phone"`
}

func NewUpdatePhoneInputThrift() *UpdatePhoneInputThrift {
  return &UpdatePhoneInputThrift{}
}


func (p *UpdatePhoneInputThrift) GetPhone() string {
  return p.Phone
}

func (p *UpdatePhoneInputThrift) GetNewPhone_() string {
  return p.NewPhone_
}
func (p *UpdatePhoneInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdatePhoneInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UpdatePhoneInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewPhone_ = v
}
  return nil
}

func (p *UpdatePhoneInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdatePhoneInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePhoneInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *UpdatePhoneInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewPhone_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_phone: ", p), err) }
  return err
}

func (p *UpdatePhoneInputThrift) Equals(other *UpdatePhoneInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Phone != other.Phone { return false }
  if p.NewPhone_ != other.NewPhone_ { return false }
  return true
}

func (p *UpdatePhoneInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePhoneInputThrift(%+v)", *p)
}

// 根据邮箱修改邮箱
// 
// Attributes:
//  - Email
//  - NewEmail_
type UpdateEmailInputThrift struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  NewEmail_ string `thrift:"new_email,2" db:"new_email" json:"new_email"`
}

func NewUpdateEmailInputThrift() *UpdateEmailInputThrift {
  return &UpdateEmailInputThrift{}
}


func (p *UpdateEmailInputThrift) GetEmail() string {
  return p.Email
}

func (p *UpdateEmailInputThrift) GetNewEmail_() string {
  return p.NewEmail_
}
func (p *UpdateEmailInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateEmailInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UpdateEmailInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewEmail_ = v
}
  return nil
}

func (p *UpdateEmailInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateEmailInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateEmailInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *UpdateEmailInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewEmail_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_email: ", p), err) }
  return err
}

func (p *UpdateEmailInputThrift) Equals(other *UpdateEmailInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Email != other.Email { return false }
  if p.NewEmail_ != other.NewEmail_ { return false }
  return true
}

func (p *UpdateEmailInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateEmailInputThrift(%+v)", *p)
}

// 根据手机号修改邮箱
// 
// Attributes:
//  - Email
//  - Phone
type UpdateEmailByPhoneInputThrift struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
}

func NewUpdateEmailByPhoneInputThrift() *UpdateEmailByPhoneInputThrift {
  return &UpdateEmailByPhoneInputThrift{}
}


func (p *UpdateEmailByPhoneInputThrift) GetEmail() string {
  return p.Email
}

func (p *UpdateEmailByPhoneInputThrift) GetPhone() string {
  return p.Phone
}
func (p *UpdateEmailByPhoneInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateEmailByPhoneInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UpdateEmailByPhoneInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UpdateEmailByPhoneInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateEmailByPhoneInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateEmailByPhoneInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *UpdateEmailByPhoneInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *UpdateEmailByPhoneInputThrift) Equals(other *UpdateEmailByPhoneInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Email != other.Email { return false }
  if p.Phone != other.Phone { return false }
  return true
}

func (p *UpdateEmailByPhoneInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateEmailByPhoneInputThrift(%+v)", *p)
}

// 根据邮箱修改密码
// 
// Attributes:
//  - Email
//  - Pwd
type UpdatePwdByEmailInputThrift struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewUpdatePwdByEmailInputThrift() *UpdatePwdByEmailInputThrift {
  return &UpdatePwdByEmailInputThrift{}
}


func (p *UpdatePwdByEmailInputThrift) GetEmail() string {
  return p.Email
}

func (p *UpdatePwdByEmailInputThrift) GetPwd() string {
  return p.Pwd
}
func (p *UpdatePwdByEmailInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdatePwdByEmailInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UpdatePwdByEmailInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UpdatePwdByEmailInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdatePwdByEmailInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePwdByEmailInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *UpdatePwdByEmailInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UpdatePwdByEmailInputThrift) Equals(other *UpdatePwdByEmailInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Email != other.Email { return false }
  if p.Pwd != other.Pwd { return false }
  return true
}

func (p *UpdatePwdByEmailInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePwdByEmailInputThrift(%+v)", *p)
}

// 根据手机号修改密码
// 
// Attributes:
//  - Phone
//  - Pwd
type UpdatePwdByPhoneInputThrift struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewUpdatePwdByPhoneInputThrift() *UpdatePwdByPhoneInputThrift {
  return &UpdatePwdByPhoneInputThrift{}
}


func (p *UpdatePwdByPhoneInputThrift) GetPhone() string {
  return p.Phone
}

func (p *UpdatePwdByPhoneInputThrift) GetPwd() string {
  return p.Pwd
}
func (p *UpdatePwdByPhoneInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdatePwdByPhoneInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UpdatePwdByPhoneInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UpdatePwdByPhoneInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdatePwdByPhoneInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePwdByPhoneInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *UpdatePwdByPhoneInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *UpdatePwdByPhoneInputThrift) Equals(other *UpdatePwdByPhoneInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Phone != other.Phone { return false }
  if p.Pwd != other.Pwd { return false }
  return true
}

func (p *UpdatePwdByPhoneInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePwdByPhoneInputThrift(%+v)", *p)
}

// 根据旧密码修改密码
// 
// Attributes:
//  - Pwd
//  - NewPwd_
type UpdatePwdInputThrift struct {
  Pwd string `thrift:"pwd,1" db:"pwd" json:"pwd"`
  NewPwd_ string `thrift:"new_pwd,2" db:"new_pwd" json:"new_pwd"`
}

func NewUpdatePwdInputThrift() *UpdatePwdInputThrift {
  return &UpdatePwdInputThrift{}
}


func (p *UpdatePwdInputThrift) GetPwd() string {
  return p.Pwd
}

func (p *UpdatePwdInputThrift) GetNewPwd_() string {
  return p.NewPwd_
}
func (p *UpdatePwdInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdatePwdInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UpdatePwdInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewPwd_ = v
}
  return nil
}

func (p *UpdatePwdInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdatePwdInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePwdInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pwd: ", p), err) }
  return err
}

func (p *UpdatePwdInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewPwd_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_pwd: ", p), err) }
  return err
}

func (p *UpdatePwdInputThrift) Equals(other *UpdatePwdInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Pwd != other.Pwd { return false }
  if p.NewPwd_ != other.NewPwd_ { return false }
  return true
}

func (p *UpdatePwdInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePwdInputThrift(%+v)", *p)
}

// Attributes:
//  - UserID
//  - CardID
//  - CardPhoto1
//  - CardPhoto2
//  - HandCardPhoto1
//  - HandCardPhoto2
type UpdateAuthBasicInputThrift struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  CardID string `thrift:"card_id,2" db:"card_id" json:"card_id"`
  CardPhoto1 string `thrift:"card_photo1,3" db:"card_photo1" json:"card_photo1"`
  CardPhoto2 string `thrift:"card_photo2,4" db:"card_photo2" json:"card_photo2"`
  HandCardPhoto1 string `thrift:"hand_card_photo1,5" db:"hand_card_photo1" json:"hand_card_photo1"`
  HandCardPhoto2 string `thrift:"hand_card_photo2,6" db:"hand_card_photo2" json:"hand_card_photo2"`
}

func NewUpdateAuthBasicInputThrift() *UpdateAuthBasicInputThrift {
  return &UpdateAuthBasicInputThrift{}
}


func (p *UpdateAuthBasicInputThrift) GetUserID() int64 {
  return p.UserID
}

func (p *UpdateAuthBasicInputThrift) GetCardID() string {
  return p.CardID
}

func (p *UpdateAuthBasicInputThrift) GetCardPhoto1() string {
  return p.CardPhoto1
}

func (p *UpdateAuthBasicInputThrift) GetCardPhoto2() string {
  return p.CardPhoto2
}

func (p *UpdateAuthBasicInputThrift) GetHandCardPhoto1() string {
  return p.HandCardPhoto1
}

func (p *UpdateAuthBasicInputThrift) GetHandCardPhoto2() string {
  return p.HandCardPhoto2
}
func (p *UpdateAuthBasicInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CardID = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CardPhoto1 = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CardPhoto2 = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.HandCardPhoto1 = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.HandCardPhoto2 = v
}
  return nil
}

func (p *UpdateAuthBasicInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateAuthBasicInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateAuthBasicInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:card_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:card_id: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo1", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo1 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:card_photo1: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo2", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo2 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:card_photo2: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo1", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:hand_card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo1 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:hand_card_photo1: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo2", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:hand_card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo2 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:hand_card_photo2: ", p), err) }
  return err
}

func (p *UpdateAuthBasicInputThrift) Equals(other *UpdateAuthBasicInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.CardID != other.CardID { return false }
  if p.CardPhoto1 != other.CardPhoto1 { return false }
  if p.CardPhoto2 != other.CardPhoto2 { return false }
  if p.HandCardPhoto1 != other.HandCardPhoto1 { return false }
  if p.HandCardPhoto2 != other.HandCardPhoto2 { return false }
  return true
}

func (p *UpdateAuthBasicInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateAuthBasicInputThrift(%+v)", *p)
}

// 根据手机号、邮箱、用户名检测账号是否存在
// 
// Attributes:
//  - Account
//  - Flag
type AccountInputThrift struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  Flag int32 `thrift:"flag,2" db:"flag" json:"flag"`
}

func NewAccountInputThrift() *AccountInputThrift {
  return &AccountInputThrift{}
}


func (p *AccountInputThrift) GetAccount() string {
  return p.Account
}

func (p *AccountInputThrift) GetFlag() int32 {
  return p.Flag
}
func (p *AccountInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *AccountInputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *AccountInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AccountInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *AccountInputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:flag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:flag: ", p), err) }
  return err
}

func (p *AccountInputThrift) Equals(other *AccountInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Account != other.Account { return false }
  if p.Flag != other.Flag { return false }
  return true
}

func (p *AccountInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountInputThrift(%+v)", *p)
}

// 根据手机号检测账号是否存在
// 
// Attributes:
//  - Phone
type PhoneInputThrift struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
}

func NewPhoneInputThrift() *PhoneInputThrift {
  return &PhoneInputThrift{}
}


func (p *PhoneInputThrift) GetPhone() string {
  return p.Phone
}
func (p *PhoneInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *PhoneInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PhoneInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *PhoneInputThrift) Equals(other *PhoneInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Phone != other.Phone { return false }
  return true
}

func (p *PhoneInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneInputThrift(%+v)", *p)
}

// 根据邮箱检测账号是否存在
// 
// Attributes:
//  - Email
type EmailInputThrift struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
}

func NewEmailInputThrift() *EmailInputThrift {
  return &EmailInputThrift{}
}


func (p *EmailInputThrift) GetEmail() string {
  return p.Email
}
func (p *EmailInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmailInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *EmailInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EmailInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmailInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *EmailInputThrift) Equals(other *EmailInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Email != other.Email { return false }
  return true
}

func (p *EmailInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EmailInputThrift(%+v)", *p)
}

// 根据用户名检测账号是否存在
// 
// Attributes:
//  - UserName
type UserNameInputThrift struct {
  UserName string `thrift:"user_name,1" db:"user_name" json:"user_name"`
}

func NewUserNameInputThrift() *UserNameInputThrift {
  return &UserNameInputThrift{}
}


func (p *UserNameInputThrift) GetUserName() string {
  return p.UserName
}
func (p *UserNameInputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserNameInputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *UserNameInputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserNameInputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserNameInputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_name: ", p), err) }
  return err
}

func (p *UserNameInputThrift) Equals(other *UserNameInputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserName != other.UserName { return false }
  return true
}

func (p *UserNameInputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserNameInputThrift(%+v)", *p)
}

// Attributes:
//  - ID
type IdThrift struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewIdThrift() *IdThrift {
  return &IdThrift{}
}


func (p *IdThrift) GetID() int64 {
  return p.ID
}
func (p *IdThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IdThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IdThrift) Equals(other *IdThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  return true
}

func (p *IdThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdThrift(%+v)", *p)
}

// Attributes:
//  - Exists
type ExistsOuputThrift struct {
  Exists bool `thrift:"exists,1" db:"exists" json:"exists"`
}

func NewExistsOuputThrift() *ExistsOuputThrift {
  return &ExistsOuputThrift{}
}


func (p *ExistsOuputThrift) GetExists() bool {
  return p.Exists
}
func (p *ExistsOuputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExistsOuputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Exists = v
}
  return nil
}

func (p *ExistsOuputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExistsOuputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExistsOuputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "exists", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Exists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exists (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exists: ", p), err) }
  return err
}

func (p *ExistsOuputThrift) Equals(other *ExistsOuputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Exists != other.Exists { return false }
  return true
}

func (p *ExistsOuputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExistsOuputThrift(%+v)", *p)
}

// Attributes:
//  - ID
//  - Phone
//  - Email
//  - UserName
//  - Pwd
//  - RegIP
//  - LoginIP
//  - RegDate
//  - LoginDate
//  - CardID
//  - CardPhoto1
//  - CardPhoto2
//  - HandCardPhoto1
//  - HandCardPhoto2
type UserOuputThrift struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  Pwd string `thrift:"pwd,5" db:"pwd" json:"pwd"`
  RegIP int64 `thrift:"reg_ip,6" db:"reg_ip" json:"reg_ip"`
  LoginIP int64 `thrift:"login_ip,7" db:"login_ip" json:"login_ip"`
  RegDate int64 `thrift:"reg_date,8" db:"reg_date" json:"reg_date"`
  LoginDate int64 `thrift:"login_date,9" db:"login_date" json:"login_date"`
  CardID string `thrift:"card_id,10" db:"card_id" json:"card_id"`
  CardPhoto1 string `thrift:"card_photo1,11" db:"card_photo1" json:"card_photo1"`
  CardPhoto2 string `thrift:"card_photo2,12" db:"card_photo2" json:"card_photo2"`
  HandCardPhoto1 string `thrift:"hand_card_photo1,13" db:"hand_card_photo1" json:"hand_card_photo1"`
  HandCardPhoto2 string `thrift:"hand_card_photo2,14" db:"hand_card_photo2" json:"hand_card_photo2"`
}

func NewUserOuputThrift() *UserOuputThrift {
  return &UserOuputThrift{}
}


func (p *UserOuputThrift) GetID() int64 {
  return p.ID
}

func (p *UserOuputThrift) GetPhone() string {
  return p.Phone
}

func (p *UserOuputThrift) GetEmail() string {
  return p.Email
}

func (p *UserOuputThrift) GetUserName() string {
  return p.UserName
}

func (p *UserOuputThrift) GetPwd() string {
  return p.Pwd
}

func (p *UserOuputThrift) GetRegIP() int64 {
  return p.RegIP
}

func (p *UserOuputThrift) GetLoginIP() int64 {
  return p.LoginIP
}

func (p *UserOuputThrift) GetRegDate() int64 {
  return p.RegDate
}

func (p *UserOuputThrift) GetLoginDate() int64 {
  return p.LoginDate
}

func (p *UserOuputThrift) GetCardID() string {
  return p.CardID
}

func (p *UserOuputThrift) GetCardPhoto1() string {
  return p.CardPhoto1
}

func (p *UserOuputThrift) GetCardPhoto2() string {
  return p.CardPhoto2
}

func (p *UserOuputThrift) GetHandCardPhoto1() string {
  return p.HandCardPhoto1
}

func (p *UserOuputThrift) GetHandCardPhoto2() string {
  return p.HandCardPhoto2
}
func (p *UserOuputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserOuputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RegIP = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginIP = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RegDate = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LoginDate = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CardID = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CardPhoto1 = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CardPhoto2 = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.HandCardPhoto1 = v
}
  return nil
}

func (p *UserOuputThrift)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HandCardPhoto2 = v
}
  return nil
}

func (p *UserOuputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserOuputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserOuputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pwd: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reg_ip", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reg_ip: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RegIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_ip (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reg_ip: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "login_ip", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:login_ip: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LoginIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_ip (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:login_ip: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reg_date", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:reg_date: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RegDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_date (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:reg_date: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "login_date", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:login_date: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LoginDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_date (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:login_date: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_id", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:card_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_id (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:card_id: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo1", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo1 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:card_photo1: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo2", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo2 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:card_photo2: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo1", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:hand_card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo1 (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:hand_card_photo1: ", p), err) }
  return err
}

func (p *UserOuputThrift) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo2", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hand_card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo2 (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hand_card_photo2: ", p), err) }
  return err
}

func (p *UserOuputThrift) Equals(other *UserOuputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Phone != other.Phone { return false }
  if p.Email != other.Email { return false }
  if p.UserName != other.UserName { return false }
  if p.Pwd != other.Pwd { return false }
  if p.RegIP != other.RegIP { return false }
  if p.LoginIP != other.LoginIP { return false }
  if p.RegDate != other.RegDate { return false }
  if p.LoginDate != other.LoginDate { return false }
  if p.CardID != other.CardID { return false }
  if p.CardPhoto1 != other.CardPhoto1 { return false }
  if p.CardPhoto2 != other.CardPhoto2 { return false }
  if p.HandCardPhoto1 != other.HandCardPhoto1 { return false }
  if p.HandCardPhoto2 != other.HandCardPhoto2 { return false }
  return true
}

func (p *UserOuputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserOuputThrift(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - CardID
//  - CardPhoto1
//  - CardPhoto2
//  - HandCardPhoto1
//  - HandCardPhoto2
type UserBasicOuputThrift struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  CardID string `thrift:"card_id,3" db:"card_id" json:"card_id"`
  CardPhoto1 string `thrift:"card_photo1,4" db:"card_photo1" json:"card_photo1"`
  CardPhoto2 string `thrift:"card_photo2,5" db:"card_photo2" json:"card_photo2"`
  HandCardPhoto1 string `thrift:"hand_card_photo1,6" db:"hand_card_photo1" json:"hand_card_photo1"`
  HandCardPhoto2 string `thrift:"hand_card_photo2,7" db:"hand_card_photo2" json:"hand_card_photo2"`
}

func NewUserBasicOuputThrift() *UserBasicOuputThrift {
  return &UserBasicOuputThrift{}
}


func (p *UserBasicOuputThrift) GetID() int64 {
  return p.ID
}

func (p *UserBasicOuputThrift) GetUserID() int64 {
  return p.UserID
}

func (p *UserBasicOuputThrift) GetCardID() string {
  return p.CardID
}

func (p *UserBasicOuputThrift) GetCardPhoto1() string {
  return p.CardPhoto1
}

func (p *UserBasicOuputThrift) GetCardPhoto2() string {
  return p.CardPhoto2
}

func (p *UserBasicOuputThrift) GetHandCardPhoto1() string {
  return p.HandCardPhoto1
}

func (p *UserBasicOuputThrift) GetHandCardPhoto2() string {
  return p.HandCardPhoto2
}
func (p *UserBasicOuputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserBasicOuputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CardID = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CardPhoto1 = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CardPhoto2 = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.HandCardPhoto1 = v
}
  return nil
}

func (p *UserBasicOuputThrift)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.HandCardPhoto2 = v
}
  return nil
}

func (p *UserBasicOuputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserBasicOuputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserBasicOuputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:card_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:card_id: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo1", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo1 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:card_photo1: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "card_photo2", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.card_photo2 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:card_photo2: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo1", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:hand_card_photo1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo1 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:hand_card_photo1: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hand_card_photo2", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:hand_card_photo2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HandCardPhoto2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hand_card_photo2 (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:hand_card_photo2: ", p), err) }
  return err
}

func (p *UserBasicOuputThrift) Equals(other *UserBasicOuputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.UserID != other.UserID { return false }
  if p.CardID != other.CardID { return false }
  if p.CardPhoto1 != other.CardPhoto1 { return false }
  if p.CardPhoto2 != other.CardPhoto2 { return false }
  if p.HandCardPhoto1 != other.HandCardPhoto1 { return false }
  if p.HandCardPhoto2 != other.HandCardPhoto2 { return false }
  return true
}

func (p *UserBasicOuputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserBasicOuputThrift(%+v)", *p)
}

// Attributes:
//  - ID
//  - Phone
//  - Email
//  - UserName
//  - Pwd
//  - RegIP
//  - LoginIP
//  - RegDate
//  - LoginDate
type AdminOuputThrift struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  Pwd string `thrift:"pwd,5" db:"pwd" json:"pwd"`
  RegIP int64 `thrift:"reg_ip,6" db:"reg_ip" json:"reg_ip"`
  LoginIP int64 `thrift:"login_ip,7" db:"login_ip" json:"login_ip"`
  RegDate int64 `thrift:"reg_date,8" db:"reg_date" json:"reg_date"`
  LoginDate int64 `thrift:"login_date,9" db:"login_date" json:"login_date"`
}

func NewAdminOuputThrift() *AdminOuputThrift {
  return &AdminOuputThrift{}
}


func (p *AdminOuputThrift) GetID() int64 {
  return p.ID
}

func (p *AdminOuputThrift) GetPhone() string {
  return p.Phone
}

func (p *AdminOuputThrift) GetEmail() string {
  return p.Email
}

func (p *AdminOuputThrift) GetUserName() string {
  return p.UserName
}

func (p *AdminOuputThrift) GetPwd() string {
  return p.Pwd
}

func (p *AdminOuputThrift) GetRegIP() int64 {
  return p.RegIP
}

func (p *AdminOuputThrift) GetLoginIP() int64 {
  return p.LoginIP
}

func (p *AdminOuputThrift) GetRegDate() int64 {
  return p.RegDate
}

func (p *AdminOuputThrift) GetLoginDate() int64 {
  return p.LoginDate
}
func (p *AdminOuputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminOuputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RegIP = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginIP = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RegDate = v
}
  return nil
}

func (p *AdminOuputThrift)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LoginDate = v
}
  return nil
}

func (p *AdminOuputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdminOuputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminOuputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pwd: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reg_ip", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reg_ip: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RegIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_ip (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reg_ip: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "login_ip", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:login_ip: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LoginIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_ip (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:login_ip: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reg_date", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:reg_date: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RegDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_date (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:reg_date: ", p), err) }
  return err
}

func (p *AdminOuputThrift) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "login_date", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:login_date: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LoginDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_date (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:login_date: ", p), err) }
  return err
}

func (p *AdminOuputThrift) Equals(other *AdminOuputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Phone != other.Phone { return false }
  if p.Email != other.Email { return false }
  if p.UserName != other.UserName { return false }
  if p.Pwd != other.Pwd { return false }
  if p.RegIP != other.RegIP { return false }
  if p.LoginIP != other.LoginIP { return false }
  if p.RegDate != other.RegDate { return false }
  if p.LoginDate != other.LoginDate { return false }
  return true
}

func (p *AdminOuputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminOuputThrift(%+v)", *p)
}

// Attributes:
//  - Result_
type ResultOuputThrift struct {
  Result_ int32 `thrift:"result,1" db:"result" json:"result"`
}

func NewResultOuputThrift() *ResultOuputThrift {
  return &ResultOuputThrift{}
}


func (p *ResultOuputThrift) GetResult_() int32 {
  return p.Result_
}
func (p *ResultOuputThrift) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultOuputThrift)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *ResultOuputThrift) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResultOuputThrift"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultOuputThrift) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ResultOuputThrift) Equals(other *ResultOuputThrift) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Result_ != other.Result_ { return false }
  return true
}

func (p *ResultOuputThrift) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultOuputThrift(%+v)", *p)
}

type UserThriftService interface {
  // Parameters:
  //  - User
  Login(ctx context.Context, user *UserInputThrift) (_r *UserOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *UserOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *UserOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *UserOuputThrift, _err error)
  // Parameters:
  //  - User
  Register1(ctx context.Context, user *UserInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  Get(ctx context.Context, user *IdThrift) (_r *UserOuputThrift, _err error)
  // Parameters:
  //  - User
  GetAuthBasic(ctx context.Context, user *IdThrift) (_r *UpdateAuthBasicInputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePhone(ctx context.Context, update *UpdatePhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdateEmail(ctx context.Context, update *UpdateEmailInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdateEmailByPhone(ctx context.Context, update *UpdateEmailByPhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePwdByPhone(ctx context.Context, update *UpdatePwdByPhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePwdByEmail(ctx context.Context, update *UpdatePwdByEmailInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdateAuthBasic(ctx context.Context, update *UpdateAuthBasicInputThrift) (_r *ResultOuputThrift, _err error)
  // 根据手机号、邮箱、用户名检测账号是否存在
  // 
  // Parameters:
  //  - User
  Exists(ctx context.Context, user *AccountInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据手机号检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsPhone(ctx context.Context, user *PhoneInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据邮箱检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsEmail(ctx context.Context, user *EmailInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据用户名检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsUserName(ctx context.Context, user *UserNameInputThrift) (_r *ExistsOuputThrift, _err error)
}

type UserThriftServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserThriftServiceClient {
  return &UserThriftServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserThriftServiceClient {
  return &UserThriftServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserThriftServiceClient(c thrift.TClient) *UserThriftServiceClient {
  return &UserThriftServiceClient{
    c: c,
  }
}

func (p *UserThriftServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserThriftServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserThriftServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) Login(ctx context.Context, user *UserInputThrift) (_r *UserOuputThrift, _err error) {
  var _args0 UserThriftServiceLoginArgs
  _args0.User = user
  var _result2 UserThriftServiceLoginResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "login", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) LoginByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *UserOuputThrift, _err error) {
  var _args4 UserThriftServiceLoginByPhoneArgs
  _args4.User = user
  var _result6 UserThriftServiceLoginByPhoneResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "login_by_phone", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_phone failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) LoginByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *UserOuputThrift, _err error) {
  var _args8 UserThriftServiceLoginByEmailArgs
  _args8.User = user
  var _result10 UserThriftServiceLoginByEmailResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "login_by_email", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  if _ret11 := _result10.GetSuccess(); _ret11 != nil {
    return _ret11, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_email failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) LoginByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *UserOuputThrift, _err error) {
  var _args12 UserThriftServiceLoginByUserNameArgs
  _args12.User = user
  var _result14 UserThriftServiceLoginByUserNameResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "login_by_user_name", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_user_name failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) Register1(ctx context.Context, user *UserInputThrift) (_r *IdThrift, _err error) {
  var _args16 UserThriftServiceRegister1Args
  _args16.User = user
  var _result18 UserThriftServiceRegister1Result
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "register1", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register1 failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) RegisterByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *IdThrift, _err error) {
  var _args20 UserThriftServiceRegisterByPhoneArgs
  _args20.User = user
  var _result22 UserThriftServiceRegisterByPhoneResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "register_by_phone", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_phone failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) RegisterByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *IdThrift, _err error) {
  var _args24 UserThriftServiceRegisterByEmailArgs
  _args24.User = user
  var _result26 UserThriftServiceRegisterByEmailResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "register_by_email", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  if _ret27 := _result26.GetSuccess(); _ret27 != nil {
    return _ret27, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_email failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) RegisterByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *IdThrift, _err error) {
  var _args28 UserThriftServiceRegisterByUserNameArgs
  _args28.User = user
  var _result30 UserThriftServiceRegisterByUserNameResult
  var _meta29 thrift.ResponseMeta
  _meta29, _err = p.Client_().Call(ctx, "register_by_user_name", &_args28, &_result30)
  p.SetLastResponseMeta_(_meta29)
  if _err != nil {
    return
  }
  if _ret31 := _result30.GetSuccess(); _ret31 != nil {
    return _ret31, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_user_name failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) Get(ctx context.Context, user *IdThrift) (_r *UserOuputThrift, _err error) {
  var _args32 UserThriftServiceGetArgs
  _args32.User = user
  var _result34 UserThriftServiceGetResult
  var _meta33 thrift.ResponseMeta
  _meta33, _err = p.Client_().Call(ctx, "get", &_args32, &_result34)
  p.SetLastResponseMeta_(_meta33)
  if _err != nil {
    return
  }
  if _ret35 := _result34.GetSuccess(); _ret35 != nil {
    return _ret35, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get failed: unknown result")
}

// Parameters:
//  - User
func (p *UserThriftServiceClient) GetAuthBasic(ctx context.Context, user *IdThrift) (_r *UpdateAuthBasicInputThrift, _err error) {
  var _args36 UserThriftServiceGetAuthBasicArgs
  _args36.User = user
  var _result38 UserThriftServiceGetAuthBasicResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "get_auth_basic", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  if _ret39 := _result38.GetSuccess(); _ret39 != nil {
    return _ret39, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get_auth_basic failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdatePhone(ctx context.Context, update *UpdatePhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args40 UserThriftServiceUpdatePhoneArgs
  _args40.Update = update
  var _result42 UserThriftServiceUpdatePhoneResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "update_phone", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  if _ret43 := _result42.GetSuccess(); _ret43 != nil {
    return _ret43, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdateEmail(ctx context.Context, update *UpdateEmailInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args44 UserThriftServiceUpdateEmailArgs
  _args44.Update = update
  var _result46 UserThriftServiceUpdateEmailResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "update_email", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  if _ret47 := _result46.GetSuccess(); _ret47 != nil {
    return _ret47, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_email failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdateEmailByPhone(ctx context.Context, update *UpdateEmailByPhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args48 UserThriftServiceUpdateEmailByPhoneArgs
  _args48.Update = update
  var _result50 UserThriftServiceUpdateEmailByPhoneResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "update_email_by_phone", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  if _ret51 := _result50.GetSuccess(); _ret51 != nil {
    return _ret51, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_email_by_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdatePwdByPhone(ctx context.Context, update *UpdatePwdByPhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args52 UserThriftServiceUpdatePwdByPhoneArgs
  _args52.Update = update
  var _result54 UserThriftServiceUpdatePwdByPhoneResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "update_pwd_by_phone", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_pwd_by_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdatePwdByEmail(ctx context.Context, update *UpdatePwdByEmailInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args56 UserThriftServiceUpdatePwdByEmailArgs
  _args56.Update = update
  var _result58 UserThriftServiceUpdatePwdByEmailResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "update_pwd_by_email", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_pwd_by_email failed: unknown result")
}

// Parameters:
//  - Update
func (p *UserThriftServiceClient) UpdateAuthBasic(ctx context.Context, update *UpdateAuthBasicInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args60 UserThriftServiceUpdateAuthBasicArgs
  _args60.Update = update
  var _result62 UserThriftServiceUpdateAuthBasicResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "update_auth_basic", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_auth_basic failed: unknown result")
}

// 根据手机号、邮箱、用户名检测账号是否存在
// 
// Parameters:
//  - User
func (p *UserThriftServiceClient) Exists(ctx context.Context, user *AccountInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args64 UserThriftServiceExistsArgs
  _args64.User = user
  var _result66 UserThriftServiceExistsResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "exists", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists failed: unknown result")
}

// 根据手机号检测账号是否存在
// 
// Parameters:
//  - User
func (p *UserThriftServiceClient) ExistsPhone(ctx context.Context, user *PhoneInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args68 UserThriftServiceExistsPhoneArgs
  _args68.User = user
  var _result70 UserThriftServiceExistsPhoneResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "exists_phone", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  if _ret71 := _result70.GetSuccess(); _ret71 != nil {
    return _ret71, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_phone failed: unknown result")
}

// 根据邮箱检测账号是否存在
// 
// Parameters:
//  - User
func (p *UserThriftServiceClient) ExistsEmail(ctx context.Context, user *EmailInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args72 UserThriftServiceExistsEmailArgs
  _args72.User = user
  var _result74 UserThriftServiceExistsEmailResult
  var _meta73 thrift.ResponseMeta
  _meta73, _err = p.Client_().Call(ctx, "exists_email", &_args72, &_result74)
  p.SetLastResponseMeta_(_meta73)
  if _err != nil {
    return
  }
  if _ret75 := _result74.GetSuccess(); _ret75 != nil {
    return _ret75, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_email failed: unknown result")
}

// 根据用户名检测账号是否存在
// 
// Parameters:
//  - User
func (p *UserThriftServiceClient) ExistsUserName(ctx context.Context, user *UserNameInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args76 UserThriftServiceExistsUserNameArgs
  _args76.User = user
  var _result78 UserThriftServiceExistsUserNameResult
  var _meta77 thrift.ResponseMeta
  _meta77, _err = p.Client_().Call(ctx, "exists_user_name", &_args76, &_result78)
  p.SetLastResponseMeta_(_meta77)
  if _err != nil {
    return
  }
  if _ret79 := _result78.GetSuccess(); _ret79 != nil {
    return _ret79, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_user_name failed: unknown result")
}

type UserThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserThriftService
}

func (p *UserThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserThriftServiceProcessor(handler UserThriftService) *UserThriftServiceProcessor {

  self80 := &UserThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self80.processorMap["login"] = &userThriftServiceProcessorLogin{handler:handler}
  self80.processorMap["login_by_phone"] = &userThriftServiceProcessorLoginByPhone{handler:handler}
  self80.processorMap["login_by_email"] = &userThriftServiceProcessorLoginByEmail{handler:handler}
  self80.processorMap["login_by_user_name"] = &userThriftServiceProcessorLoginByUserName{handler:handler}
  self80.processorMap["register1"] = &userThriftServiceProcessorRegister1{handler:handler}
  self80.processorMap["register_by_phone"] = &userThriftServiceProcessorRegisterByPhone{handler:handler}
  self80.processorMap["register_by_email"] = &userThriftServiceProcessorRegisterByEmail{handler:handler}
  self80.processorMap["register_by_user_name"] = &userThriftServiceProcessorRegisterByUserName{handler:handler}
  self80.processorMap["get"] = &userThriftServiceProcessorGet{handler:handler}
  self80.processorMap["get_auth_basic"] = &userThriftServiceProcessorGetAuthBasic{handler:handler}
  self80.processorMap["update_phone"] = &userThriftServiceProcessorUpdatePhone{handler:handler}
  self80.processorMap["update_email"] = &userThriftServiceProcessorUpdateEmail{handler:handler}
  self80.processorMap["update_email_by_phone"] = &userThriftServiceProcessorUpdateEmailByPhone{handler:handler}
  self80.processorMap["update_pwd_by_phone"] = &userThriftServiceProcessorUpdatePwdByPhone{handler:handler}
  self80.processorMap["update_pwd_by_email"] = &userThriftServiceProcessorUpdatePwdByEmail{handler:handler}
  self80.processorMap["update_auth_basic"] = &userThriftServiceProcessorUpdateAuthBasic{handler:handler}
  self80.processorMap["exists"] = &userThriftServiceProcessorExists{handler:handler}
  self80.processorMap["exists_phone"] = &userThriftServiceProcessorExistsPhone{handler:handler}
  self80.processorMap["exists_email"] = &userThriftServiceProcessorExistsEmail{handler:handler}
  self80.processorMap["exists_user_name"] = &userThriftServiceProcessorExistsUserName{handler:handler}
return self80
}

func (p *UserThriftServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x81 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x81.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x81

}

type userThriftServiceProcessorLogin struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceLoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceLoginResult{}
  var retval *UserOuputThrift
  if retval, err2 = p.handler.Login(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorLoginByPhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorLoginByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceLoginByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceLoginByPhoneResult{}
  var retval *UserOuputThrift
  if retval, err2 = p.handler.LoginByPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorLoginByEmail struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorLoginByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceLoginByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceLoginByEmailResult{}
  var retval *UserOuputThrift
  if retval, err2 = p.handler.LoginByEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorLoginByUserName struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorLoginByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceLoginByUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceLoginByUserNameResult{}
  var retval *UserOuputThrift
  if retval, err2 = p.handler.LoginByUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorRegister1 struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorRegister1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceRegister1Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceRegister1Result{}
  var retval *IdThrift
  if retval, err2 = p.handler.Register1(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register1: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register1", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorRegisterByPhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorRegisterByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceRegisterByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceRegisterByPhoneResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorRegisterByEmail struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorRegisterByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceRegisterByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceRegisterByEmailResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorRegisterByUserName struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorRegisterByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceRegisterByUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceRegisterByUserNameResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorGet struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceGetResult{}
  var retval *UserOuputThrift
  if retval, err2 = p.handler.Get(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorGetAuthBasic struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorGetAuthBasic) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceGetAuthBasicArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_auth_basic", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceGetAuthBasicResult{}
  var retval *UpdateAuthBasicInputThrift
  if retval, err2 = p.handler.GetAuthBasic(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_auth_basic: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_auth_basic", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_auth_basic", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdatePhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdatePhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdatePhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdatePhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdateEmail struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdateEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdateEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdateEmailResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdateEmail(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdateEmailByPhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdateEmailByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdateEmailByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdateEmailByPhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdateEmailByPhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_email_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdatePwdByPhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdatePwdByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdatePwdByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdatePwdByPhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePwdByPhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_pwd_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdatePwdByEmail struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdatePwdByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdatePwdByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdatePwdByEmailResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePwdByEmail(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_pwd_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorUpdateAuthBasic struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorUpdateAuthBasic) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceUpdateAuthBasicArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_auth_basic", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceUpdateAuthBasicResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdateAuthBasic(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_auth_basic: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_auth_basic", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_auth_basic", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorExists struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorExists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceExistsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceExistsResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.Exists(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorExistsPhone struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorExistsPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceExistsPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceExistsPhoneResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorExistsEmail struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorExistsEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceExistsEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceExistsEmailResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userThriftServiceProcessorExistsUserName struct {
  handler UserThriftService
}

func (p *userThriftServiceProcessorExistsUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserThriftServiceExistsUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserThriftServiceExistsUserNameResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
type UserThriftServiceLoginArgs struct {
  User *UserInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceLoginArgs() *UserThriftServiceLoginArgs {
  return &UserThriftServiceLoginArgs{}
}

var UserThriftServiceLoginArgs_User_DEFAULT *UserInputThrift
func (p *UserThriftServiceLoginArgs) GetUser() *UserInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceLoginArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceLoginArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceLoginResult struct {
  Success *UserOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceLoginResult() *UserThriftServiceLoginResult {
  return &UserThriftServiceLoginResult{}
}

var UserThriftServiceLoginResult_Success_DEFAULT *UserOuputThrift
func (p *UserThriftServiceLoginResult) GetSuccess() *UserOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceLoginByPhoneArgs struct {
  User *UserPhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceLoginByPhoneArgs() *UserThriftServiceLoginByPhoneArgs {
  return &UserThriftServiceLoginByPhoneArgs{}
}

var UserThriftServiceLoginByPhoneArgs_User_DEFAULT *UserPhoneInputThrift
func (p *UserThriftServiceLoginByPhoneArgs) GetUser() *UserPhoneInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceLoginByPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceLoginByPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceLoginByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserPhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceLoginByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceLoginByPhoneResult struct {
  Success *UserOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceLoginByPhoneResult() *UserThriftServiceLoginByPhoneResult {
  return &UserThriftServiceLoginByPhoneResult{}
}

var UserThriftServiceLoginByPhoneResult_Success_DEFAULT *UserOuputThrift
func (p *UserThriftServiceLoginByPhoneResult) GetSuccess() *UserOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceLoginByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceLoginByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceLoginByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceLoginByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceLoginByEmailArgs struct {
  User *UserEmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceLoginByEmailArgs() *UserThriftServiceLoginByEmailArgs {
  return &UserThriftServiceLoginByEmailArgs{}
}

var UserThriftServiceLoginByEmailArgs_User_DEFAULT *UserEmailInputThrift
func (p *UserThriftServiceLoginByEmailArgs) GetUser() *UserEmailInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceLoginByEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceLoginByEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceLoginByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserEmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceLoginByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceLoginByEmailResult struct {
  Success *UserOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceLoginByEmailResult() *UserThriftServiceLoginByEmailResult {
  return &UserThriftServiceLoginByEmailResult{}
}

var UserThriftServiceLoginByEmailResult_Success_DEFAULT *UserOuputThrift
func (p *UserThriftServiceLoginByEmailResult) GetSuccess() *UserOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceLoginByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceLoginByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceLoginByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceLoginByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceLoginByUserNameArgs struct {
  User *UserUserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceLoginByUserNameArgs() *UserThriftServiceLoginByUserNameArgs {
  return &UserThriftServiceLoginByUserNameArgs{}
}

var UserThriftServiceLoginByUserNameArgs_User_DEFAULT *UserUserNameInputThrift
func (p *UserThriftServiceLoginByUserNameArgs) GetUser() *UserUserNameInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceLoginByUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceLoginByUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceLoginByUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserUserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceLoginByUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceLoginByUserNameResult struct {
  Success *UserOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceLoginByUserNameResult() *UserThriftServiceLoginByUserNameResult {
  return &UserThriftServiceLoginByUserNameResult{}
}

var UserThriftServiceLoginByUserNameResult_Success_DEFAULT *UserOuputThrift
func (p *UserThriftServiceLoginByUserNameResult) GetSuccess() *UserOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceLoginByUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceLoginByUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceLoginByUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceLoginByUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceLoginByUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceLoginByUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceLoginByUserNameResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceRegister1Args struct {
  User *UserInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceRegister1Args() *UserThriftServiceRegister1Args {
  return &UserThriftServiceRegister1Args{}
}

var UserThriftServiceRegister1Args_User_DEFAULT *UserInputThrift
func (p *UserThriftServiceRegister1Args) GetUser() *UserInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceRegister1Args_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceRegister1Args) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceRegister1Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegister1Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceRegister1Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegister1Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceRegister1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegister1Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceRegister1Result struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceRegister1Result() *UserThriftServiceRegister1Result {
  return &UserThriftServiceRegister1Result{}
}

var UserThriftServiceRegister1Result_Success_DEFAULT *IdThrift
func (p *UserThriftServiceRegister1Result) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceRegister1Result_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceRegister1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceRegister1Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegister1Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceRegister1Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegister1Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceRegister1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegister1Result(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceRegisterByPhoneArgs struct {
  User *UserPhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceRegisterByPhoneArgs() *UserThriftServiceRegisterByPhoneArgs {
  return &UserThriftServiceRegisterByPhoneArgs{}
}

var UserThriftServiceRegisterByPhoneArgs_User_DEFAULT *UserPhoneInputThrift
func (p *UserThriftServiceRegisterByPhoneArgs) GetUser() *UserPhoneInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceRegisterByPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceRegisterByPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceRegisterByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserPhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceRegisterByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceRegisterByPhoneResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceRegisterByPhoneResult() *UserThriftServiceRegisterByPhoneResult {
  return &UserThriftServiceRegisterByPhoneResult{}
}

var UserThriftServiceRegisterByPhoneResult_Success_DEFAULT *IdThrift
func (p *UserThriftServiceRegisterByPhoneResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceRegisterByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceRegisterByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceRegisterByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceRegisterByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceRegisterByEmailArgs struct {
  User *UserEmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceRegisterByEmailArgs() *UserThriftServiceRegisterByEmailArgs {
  return &UserThriftServiceRegisterByEmailArgs{}
}

var UserThriftServiceRegisterByEmailArgs_User_DEFAULT *UserEmailInputThrift
func (p *UserThriftServiceRegisterByEmailArgs) GetUser() *UserEmailInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceRegisterByEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceRegisterByEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceRegisterByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserEmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceRegisterByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceRegisterByEmailResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceRegisterByEmailResult() *UserThriftServiceRegisterByEmailResult {
  return &UserThriftServiceRegisterByEmailResult{}
}

var UserThriftServiceRegisterByEmailResult_Success_DEFAULT *IdThrift
func (p *UserThriftServiceRegisterByEmailResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceRegisterByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceRegisterByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceRegisterByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceRegisterByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceRegisterByUserNameArgs struct {
  User *UserUserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceRegisterByUserNameArgs() *UserThriftServiceRegisterByUserNameArgs {
  return &UserThriftServiceRegisterByUserNameArgs{}
}

var UserThriftServiceRegisterByUserNameArgs_User_DEFAULT *UserUserNameInputThrift
func (p *UserThriftServiceRegisterByUserNameArgs) GetUser() *UserUserNameInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceRegisterByUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceRegisterByUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceRegisterByUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserUserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceRegisterByUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceRegisterByUserNameResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceRegisterByUserNameResult() *UserThriftServiceRegisterByUserNameResult {
  return &UserThriftServiceRegisterByUserNameResult{}
}

var UserThriftServiceRegisterByUserNameResult_Success_DEFAULT *IdThrift
func (p *UserThriftServiceRegisterByUserNameResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceRegisterByUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceRegisterByUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceRegisterByUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceRegisterByUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceRegisterByUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceRegisterByUserNameResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceGetArgs struct {
  User *IdThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceGetArgs() *UserThriftServiceGetArgs {
  return &UserThriftServiceGetArgs{}
}

var UserThriftServiceGetArgs_User_DEFAULT *IdThrift
func (p *UserThriftServiceGetArgs) GetUser() *IdThrift {
  if !p.IsSetUser() {
    return UserThriftServiceGetArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceGetArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &IdThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceGetResult struct {
  Success *UserOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceGetResult() *UserThriftServiceGetResult {
  return &UserThriftServiceGetResult{}
}

var UserThriftServiceGetResult_Success_DEFAULT *UserOuputThrift
func (p *UserThriftServiceGetResult) GetSuccess() *UserOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UserOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceGetResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceGetAuthBasicArgs struct {
  User *IdThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceGetAuthBasicArgs() *UserThriftServiceGetAuthBasicArgs {
  return &UserThriftServiceGetAuthBasicArgs{}
}

var UserThriftServiceGetAuthBasicArgs_User_DEFAULT *IdThrift
func (p *UserThriftServiceGetAuthBasicArgs) GetUser() *IdThrift {
  if !p.IsSetUser() {
    return UserThriftServiceGetAuthBasicArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceGetAuthBasicArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceGetAuthBasicArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceGetAuthBasicArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &IdThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceGetAuthBasicArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_auth_basic_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceGetAuthBasicArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceGetAuthBasicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceGetAuthBasicArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceGetAuthBasicResult struct {
  Success *UpdateAuthBasicInputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceGetAuthBasicResult() *UserThriftServiceGetAuthBasicResult {
  return &UserThriftServiceGetAuthBasicResult{}
}

var UserThriftServiceGetAuthBasicResult_Success_DEFAULT *UpdateAuthBasicInputThrift
func (p *UserThriftServiceGetAuthBasicResult) GetSuccess() *UpdateAuthBasicInputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceGetAuthBasicResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceGetAuthBasicResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceGetAuthBasicResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceGetAuthBasicResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateAuthBasicInputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceGetAuthBasicResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_auth_basic_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceGetAuthBasicResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceGetAuthBasicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceGetAuthBasicResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdatePhoneArgs struct {
  Update *UpdatePhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdatePhoneArgs() *UserThriftServiceUpdatePhoneArgs {
  return &UserThriftServiceUpdatePhoneArgs{}
}

var UserThriftServiceUpdatePhoneArgs_Update_DEFAULT *UpdatePhoneInputThrift
func (p *UserThriftServiceUpdatePhoneArgs) GetUpdate() *UpdatePhoneInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdatePhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdatePhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdatePhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdatePhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdatePhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdatePhoneResult() *UserThriftServiceUpdatePhoneResult {
  return &UserThriftServiceUpdatePhoneResult{}
}

var UserThriftServiceUpdatePhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdatePhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdatePhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdatePhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdatePhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdatePhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdateEmailArgs struct {
  Update *UpdateEmailInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdateEmailArgs() *UserThriftServiceUpdateEmailArgs {
  return &UserThriftServiceUpdateEmailArgs{}
}

var UserThriftServiceUpdateEmailArgs_Update_DEFAULT *UpdateEmailInputThrift
func (p *UserThriftServiceUpdateEmailArgs) GetUpdate() *UpdateEmailInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdateEmailArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdateEmailArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdateEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateEmailInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdateEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdateEmailResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdateEmailResult() *UserThriftServiceUpdateEmailResult {
  return &UserThriftServiceUpdateEmailResult{}
}

var UserThriftServiceUpdateEmailResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdateEmailResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdateEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdateEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdateEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdateEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateEmailResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdateEmailByPhoneArgs struct {
  Update *UpdateEmailByPhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdateEmailByPhoneArgs() *UserThriftServiceUpdateEmailByPhoneArgs {
  return &UserThriftServiceUpdateEmailByPhoneArgs{}
}

var UserThriftServiceUpdateEmailByPhoneArgs_Update_DEFAULT *UpdateEmailByPhoneInputThrift
func (p *UserThriftServiceUpdateEmailByPhoneArgs) GetUpdate() *UpdateEmailByPhoneInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdateEmailByPhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdateEmailByPhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdateEmailByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateEmailByPhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdateEmailByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateEmailByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdateEmailByPhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdateEmailByPhoneResult() *UserThriftServiceUpdateEmailByPhoneResult {
  return &UserThriftServiceUpdateEmailByPhoneResult{}
}

var UserThriftServiceUpdateEmailByPhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdateEmailByPhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdateEmailByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdateEmailByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdateEmailByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateEmailByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdateEmailByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateEmailByPhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdatePwdByPhoneArgs struct {
  Update *UpdatePwdByPhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdatePwdByPhoneArgs() *UserThriftServiceUpdatePwdByPhoneArgs {
  return &UserThriftServiceUpdatePwdByPhoneArgs{}
}

var UserThriftServiceUpdatePwdByPhoneArgs_Update_DEFAULT *UpdatePwdByPhoneInputThrift
func (p *UserThriftServiceUpdatePwdByPhoneArgs) GetUpdate() *UpdatePwdByPhoneInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdatePwdByPhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdatePwdByPhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdatePwdByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePwdByPhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdatePwdByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePwdByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdatePwdByPhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdatePwdByPhoneResult() *UserThriftServiceUpdatePwdByPhoneResult {
  return &UserThriftServiceUpdatePwdByPhoneResult{}
}

var UserThriftServiceUpdatePwdByPhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdatePwdByPhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdatePwdByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdatePwdByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdatePwdByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePwdByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdatePwdByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePwdByPhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdatePwdByEmailArgs struct {
  Update *UpdatePwdByEmailInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdatePwdByEmailArgs() *UserThriftServiceUpdatePwdByEmailArgs {
  return &UserThriftServiceUpdatePwdByEmailArgs{}
}

var UserThriftServiceUpdatePwdByEmailArgs_Update_DEFAULT *UpdatePwdByEmailInputThrift
func (p *UserThriftServiceUpdatePwdByEmailArgs) GetUpdate() *UpdatePwdByEmailInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdatePwdByEmailArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdatePwdByEmailArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdatePwdByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePwdByEmailInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdatePwdByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePwdByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdatePwdByEmailResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdatePwdByEmailResult() *UserThriftServiceUpdatePwdByEmailResult {
  return &UserThriftServiceUpdatePwdByEmailResult{}
}

var UserThriftServiceUpdatePwdByEmailResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdatePwdByEmailResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdatePwdByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdatePwdByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdatePwdByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdatePwdByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdatePwdByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdatePwdByEmailResult(%+v)", *p)
}

// Attributes:
//  - Update
type UserThriftServiceUpdateAuthBasicArgs struct {
  Update *UpdateAuthBasicInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewUserThriftServiceUpdateAuthBasicArgs() *UserThriftServiceUpdateAuthBasicArgs {
  return &UserThriftServiceUpdateAuthBasicArgs{}
}

var UserThriftServiceUpdateAuthBasicArgs_Update_DEFAULT *UpdateAuthBasicInputThrift
func (p *UserThriftServiceUpdateAuthBasicArgs) GetUpdate() *UpdateAuthBasicInputThrift {
  if !p.IsSetUpdate() {
    return UserThriftServiceUpdateAuthBasicArgs_Update_DEFAULT
  }
return p.Update
}
func (p *UserThriftServiceUpdateAuthBasicArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *UserThriftServiceUpdateAuthBasicArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateAuthBasicInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_auth_basic_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *UserThriftServiceUpdateAuthBasicArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateAuthBasicArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceUpdateAuthBasicResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceUpdateAuthBasicResult() *UserThriftServiceUpdateAuthBasicResult {
  return &UserThriftServiceUpdateAuthBasicResult{}
}

var UserThriftServiceUpdateAuthBasicResult_Success_DEFAULT *ResultOuputThrift
func (p *UserThriftServiceUpdateAuthBasicResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceUpdateAuthBasicResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceUpdateAuthBasicResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceUpdateAuthBasicResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_auth_basic_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceUpdateAuthBasicResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceUpdateAuthBasicResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceUpdateAuthBasicResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceExistsArgs struct {
  User *AccountInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceExistsArgs() *UserThriftServiceExistsArgs {
  return &UserThriftServiceExistsArgs{}
}

var UserThriftServiceExistsArgs_User_DEFAULT *AccountInputThrift
func (p *UserThriftServiceExistsArgs) GetUser() *AccountInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceExistsArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceExistsArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceExistsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &AccountInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceExistsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceExistsResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceExistsResult() *UserThriftServiceExistsResult {
  return &UserThriftServiceExistsResult{}
}

var UserThriftServiceExistsResult_Success_DEFAULT *ExistsOuputThrift
func (p *UserThriftServiceExistsResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceExistsResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceExistsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceExistsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceExistsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceExistsPhoneArgs struct {
  User *PhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceExistsPhoneArgs() *UserThriftServiceExistsPhoneArgs {
  return &UserThriftServiceExistsPhoneArgs{}
}

var UserThriftServiceExistsPhoneArgs_User_DEFAULT *PhoneInputThrift
func (p *UserThriftServiceExistsPhoneArgs) GetUser() *PhoneInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceExistsPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceExistsPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceExistsPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &PhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceExistsPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceExistsPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceExistsPhoneResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceExistsPhoneResult() *UserThriftServiceExistsPhoneResult {
  return &UserThriftServiceExistsPhoneResult{}
}

var UserThriftServiceExistsPhoneResult_Success_DEFAULT *ExistsOuputThrift
func (p *UserThriftServiceExistsPhoneResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceExistsPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceExistsPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceExistsPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceExistsPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceExistsPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceExistsEmailArgs struct {
  User *EmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceExistsEmailArgs() *UserThriftServiceExistsEmailArgs {
  return &UserThriftServiceExistsEmailArgs{}
}

var UserThriftServiceExistsEmailArgs_User_DEFAULT *EmailInputThrift
func (p *UserThriftServiceExistsEmailArgs) GetUser() *EmailInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceExistsEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceExistsEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceExistsEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &EmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceExistsEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceExistsEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceExistsEmailResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceExistsEmailResult() *UserThriftServiceExistsEmailResult {
  return &UserThriftServiceExistsEmailResult{}
}

var UserThriftServiceExistsEmailResult_Success_DEFAULT *ExistsOuputThrift
func (p *UserThriftServiceExistsEmailResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceExistsEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceExistsEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceExistsEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceExistsEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceExistsEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type UserThriftServiceExistsUserNameArgs struct {
  User *UserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewUserThriftServiceExistsUserNameArgs() *UserThriftServiceExistsUserNameArgs {
  return &UserThriftServiceExistsUserNameArgs{}
}

var UserThriftServiceExistsUserNameArgs_User_DEFAULT *UserNameInputThrift
func (p *UserThriftServiceExistsUserNameArgs) GetUser() *UserNameInputThrift {
  if !p.IsSetUser() {
    return UserThriftServiceExistsUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *UserThriftServiceExistsUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *UserThriftServiceExistsUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserThriftServiceExistsUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *UserThriftServiceExistsUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserThriftServiceExistsUserNameResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserThriftServiceExistsUserNameResult() *UserThriftServiceExistsUserNameResult {
  return &UserThriftServiceExistsUserNameResult{}
}

var UserThriftServiceExistsUserNameResult_Success_DEFAULT *ExistsOuputThrift
func (p *UserThriftServiceExistsUserNameResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return UserThriftServiceExistsUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserThriftServiceExistsUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserThriftServiceExistsUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserThriftServiceExistsUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserThriftServiceExistsUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserThriftServiceExistsUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserThriftServiceExistsUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserThriftServiceExistsUserNameResult(%+v)", *p)
}


type AdminThriftService interface {
  // Parameters:
  //  - User
  Login(ctx context.Context, user *UserInputThrift) (_r *AdminOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *AdminOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *AdminOuputThrift, _err error)
  // Parameters:
  //  - User
  LoginByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *AdminOuputThrift, _err error)
  // Parameters:
  //  - User
  Register1(ctx context.Context, user *UserInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  RegisterByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *IdThrift, _err error)
  // Parameters:
  //  - User
  Get(ctx context.Context, user *IdThrift) (_r *AdminOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePhone(ctx context.Context, update *UpdatePhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdateEmail(ctx context.Context, update *UpdateEmailInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdateEmailByPhone(ctx context.Context, update *UpdateEmailByPhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePwdByPhone(ctx context.Context, update *UpdatePwdByPhoneInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePwdByEmail(ctx context.Context, update *UpdatePwdByEmailInputThrift) (_r *ResultOuputThrift, _err error)
  // Parameters:
  //  - Update
  UpdatePwd(ctx context.Context, update *UpdatePwdInputThrift) (_r *ResultOuputThrift, _err error)
  // 根据手机号、邮箱、用户名检测账号是否存在
  // 
  // Parameters:
  //  - User
  Exists(ctx context.Context, user *AccountInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据手机号检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsPhone(ctx context.Context, user *PhoneInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据邮箱检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsEmail(ctx context.Context, user *EmailInputThrift) (_r *ExistsOuputThrift, _err error)
  // 根据用户名检测账号是否存在
  // 
  // Parameters:
  //  - User
  ExistsUserName(ctx context.Context, user *UserNameInputThrift) (_r *ExistsOuputThrift, _err error)
}

type AdminThriftServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewAdminThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdminThriftServiceClient {
  return &AdminThriftServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAdminThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdminThriftServiceClient {
  return &AdminThriftServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAdminThriftServiceClient(c thrift.TClient) *AdminThriftServiceClient {
  return &AdminThriftServiceClient{
    c: c,
  }
}

func (p *AdminThriftServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *AdminThriftServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *AdminThriftServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) Login(ctx context.Context, user *UserInputThrift) (_r *AdminOuputThrift, _err error) {
  var _args202 AdminThriftServiceLoginArgs
  _args202.User = user
  var _result204 AdminThriftServiceLoginResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "login", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  if _ret205 := _result204.GetSuccess(); _ret205 != nil {
    return _ret205, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) LoginByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *AdminOuputThrift, _err error) {
  var _args206 AdminThriftServiceLoginByPhoneArgs
  _args206.User = user
  var _result208 AdminThriftServiceLoginByPhoneResult
  var _meta207 thrift.ResponseMeta
  _meta207, _err = p.Client_().Call(ctx, "login_by_phone", &_args206, &_result208)
  p.SetLastResponseMeta_(_meta207)
  if _err != nil {
    return
  }
  if _ret209 := _result208.GetSuccess(); _ret209 != nil {
    return _ret209, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_phone failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) LoginByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *AdminOuputThrift, _err error) {
  var _args210 AdminThriftServiceLoginByEmailArgs
  _args210.User = user
  var _result212 AdminThriftServiceLoginByEmailResult
  var _meta211 thrift.ResponseMeta
  _meta211, _err = p.Client_().Call(ctx, "login_by_email", &_args210, &_result212)
  p.SetLastResponseMeta_(_meta211)
  if _err != nil {
    return
  }
  if _ret213 := _result212.GetSuccess(); _ret213 != nil {
    return _ret213, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_email failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) LoginByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *AdminOuputThrift, _err error) {
  var _args214 AdminThriftServiceLoginByUserNameArgs
  _args214.User = user
  var _result216 AdminThriftServiceLoginByUserNameResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "login_by_user_name", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  if _ret217 := _result216.GetSuccess(); _ret217 != nil {
    return _ret217, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "login_by_user_name failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) Register1(ctx context.Context, user *UserInputThrift) (_r *IdThrift, _err error) {
  var _args218 AdminThriftServiceRegister1Args
  _args218.User = user
  var _result220 AdminThriftServiceRegister1Result
  var _meta219 thrift.ResponseMeta
  _meta219, _err = p.Client_().Call(ctx, "register1", &_args218, &_result220)
  p.SetLastResponseMeta_(_meta219)
  if _err != nil {
    return
  }
  if _ret221 := _result220.GetSuccess(); _ret221 != nil {
    return _ret221, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register1 failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) RegisterByPhone(ctx context.Context, user *UserPhoneInputThrift) (_r *IdThrift, _err error) {
  var _args222 AdminThriftServiceRegisterByPhoneArgs
  _args222.User = user
  var _result224 AdminThriftServiceRegisterByPhoneResult
  var _meta223 thrift.ResponseMeta
  _meta223, _err = p.Client_().Call(ctx, "register_by_phone", &_args222, &_result224)
  p.SetLastResponseMeta_(_meta223)
  if _err != nil {
    return
  }
  if _ret225 := _result224.GetSuccess(); _ret225 != nil {
    return _ret225, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_phone failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) RegisterByEmail(ctx context.Context, user *UserEmailInputThrift) (_r *IdThrift, _err error) {
  var _args226 AdminThriftServiceRegisterByEmailArgs
  _args226.User = user
  var _result228 AdminThriftServiceRegisterByEmailResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "register_by_email", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  if _ret229 := _result228.GetSuccess(); _ret229 != nil {
    return _ret229, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_email failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) RegisterByUserName(ctx context.Context, user *UserUserNameInputThrift) (_r *IdThrift, _err error) {
  var _args230 AdminThriftServiceRegisterByUserNameArgs
  _args230.User = user
  var _result232 AdminThriftServiceRegisterByUserNameResult
  var _meta231 thrift.ResponseMeta
  _meta231, _err = p.Client_().Call(ctx, "register_by_user_name", &_args230, &_result232)
  p.SetLastResponseMeta_(_meta231)
  if _err != nil {
    return
  }
  if _ret233 := _result232.GetSuccess(); _ret233 != nil {
    return _ret233, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "register_by_user_name failed: unknown result")
}

// Parameters:
//  - User
func (p *AdminThriftServiceClient) Get(ctx context.Context, user *IdThrift) (_r *AdminOuputThrift, _err error) {
  var _args234 AdminThriftServiceGetArgs
  _args234.User = user
  var _result236 AdminThriftServiceGetResult
  var _meta235 thrift.ResponseMeta
  _meta235, _err = p.Client_().Call(ctx, "get", &_args234, &_result236)
  p.SetLastResponseMeta_(_meta235)
  if _err != nil {
    return
  }
  if _ret237 := _result236.GetSuccess(); _ret237 != nil {
    return _ret237, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdatePhone(ctx context.Context, update *UpdatePhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args238 AdminThriftServiceUpdatePhoneArgs
  _args238.Update = update
  var _result240 AdminThriftServiceUpdatePhoneResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "update_phone", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  if _ret241 := _result240.GetSuccess(); _ret241 != nil {
    return _ret241, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdateEmail(ctx context.Context, update *UpdateEmailInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args242 AdminThriftServiceUpdateEmailArgs
  _args242.Update = update
  var _result244 AdminThriftServiceUpdateEmailResult
  var _meta243 thrift.ResponseMeta
  _meta243, _err = p.Client_().Call(ctx, "update_email", &_args242, &_result244)
  p.SetLastResponseMeta_(_meta243)
  if _err != nil {
    return
  }
  if _ret245 := _result244.GetSuccess(); _ret245 != nil {
    return _ret245, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_email failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdateEmailByPhone(ctx context.Context, update *UpdateEmailByPhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args246 AdminThriftServiceUpdateEmailByPhoneArgs
  _args246.Update = update
  var _result248 AdminThriftServiceUpdateEmailByPhoneResult
  var _meta247 thrift.ResponseMeta
  _meta247, _err = p.Client_().Call(ctx, "update_email_by_phone", &_args246, &_result248)
  p.SetLastResponseMeta_(_meta247)
  if _err != nil {
    return
  }
  if _ret249 := _result248.GetSuccess(); _ret249 != nil {
    return _ret249, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_email_by_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdatePwdByPhone(ctx context.Context, update *UpdatePwdByPhoneInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args250 AdminThriftServiceUpdatePwdByPhoneArgs
  _args250.Update = update
  var _result252 AdminThriftServiceUpdatePwdByPhoneResult
  var _meta251 thrift.ResponseMeta
  _meta251, _err = p.Client_().Call(ctx, "update_pwd_by_phone", &_args250, &_result252)
  p.SetLastResponseMeta_(_meta251)
  if _err != nil {
    return
  }
  if _ret253 := _result252.GetSuccess(); _ret253 != nil {
    return _ret253, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_pwd_by_phone failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdatePwdByEmail(ctx context.Context, update *UpdatePwdByEmailInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args254 AdminThriftServiceUpdatePwdByEmailArgs
  _args254.Update = update
  var _result256 AdminThriftServiceUpdatePwdByEmailResult
  var _meta255 thrift.ResponseMeta
  _meta255, _err = p.Client_().Call(ctx, "update_pwd_by_email", &_args254, &_result256)
  p.SetLastResponseMeta_(_meta255)
  if _err != nil {
    return
  }
  if _ret257 := _result256.GetSuccess(); _ret257 != nil {
    return _ret257, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_pwd_by_email failed: unknown result")
}

// Parameters:
//  - Update
func (p *AdminThriftServiceClient) UpdatePwd(ctx context.Context, update *UpdatePwdInputThrift) (_r *ResultOuputThrift, _err error) {
  var _args258 AdminThriftServiceUpdatePwdArgs
  _args258.Update = update
  var _result260 AdminThriftServiceUpdatePwdResult
  var _meta259 thrift.ResponseMeta
  _meta259, _err = p.Client_().Call(ctx, "update_pwd", &_args258, &_result260)
  p.SetLastResponseMeta_(_meta259)
  if _err != nil {
    return
  }
  if _ret261 := _result260.GetSuccess(); _ret261 != nil {
    return _ret261, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "update_pwd failed: unknown result")
}

// 根据手机号、邮箱、用户名检测账号是否存在
// 
// Parameters:
//  - User
func (p *AdminThriftServiceClient) Exists(ctx context.Context, user *AccountInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args262 AdminThriftServiceExistsArgs
  _args262.User = user
  var _result264 AdminThriftServiceExistsResult
  var _meta263 thrift.ResponseMeta
  _meta263, _err = p.Client_().Call(ctx, "exists", &_args262, &_result264)
  p.SetLastResponseMeta_(_meta263)
  if _err != nil {
    return
  }
  if _ret265 := _result264.GetSuccess(); _ret265 != nil {
    return _ret265, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists failed: unknown result")
}

// 根据手机号检测账号是否存在
// 
// Parameters:
//  - User
func (p *AdminThriftServiceClient) ExistsPhone(ctx context.Context, user *PhoneInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args266 AdminThriftServiceExistsPhoneArgs
  _args266.User = user
  var _result268 AdminThriftServiceExistsPhoneResult
  var _meta267 thrift.ResponseMeta
  _meta267, _err = p.Client_().Call(ctx, "exists_phone", &_args266, &_result268)
  p.SetLastResponseMeta_(_meta267)
  if _err != nil {
    return
  }
  if _ret269 := _result268.GetSuccess(); _ret269 != nil {
    return _ret269, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_phone failed: unknown result")
}

// 根据邮箱检测账号是否存在
// 
// Parameters:
//  - User
func (p *AdminThriftServiceClient) ExistsEmail(ctx context.Context, user *EmailInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args270 AdminThriftServiceExistsEmailArgs
  _args270.User = user
  var _result272 AdminThriftServiceExistsEmailResult
  var _meta271 thrift.ResponseMeta
  _meta271, _err = p.Client_().Call(ctx, "exists_email", &_args270, &_result272)
  p.SetLastResponseMeta_(_meta271)
  if _err != nil {
    return
  }
  if _ret273 := _result272.GetSuccess(); _ret273 != nil {
    return _ret273, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_email failed: unknown result")
}

// 根据用户名检测账号是否存在
// 
// Parameters:
//  - User
func (p *AdminThriftServiceClient) ExistsUserName(ctx context.Context, user *UserNameInputThrift) (_r *ExistsOuputThrift, _err error) {
  var _args274 AdminThriftServiceExistsUserNameArgs
  _args274.User = user
  var _result276 AdminThriftServiceExistsUserNameResult
  var _meta275 thrift.ResponseMeta
  _meta275, _err = p.Client_().Call(ctx, "exists_user_name", &_args274, &_result276)
  p.SetLastResponseMeta_(_meta275)
  if _err != nil {
    return
  }
  if _ret277 := _result276.GetSuccess(); _ret277 != nil {
    return _ret277, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exists_user_name failed: unknown result")
}

type AdminThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AdminThriftService
}

func (p *AdminThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AdminThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AdminThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAdminThriftServiceProcessor(handler AdminThriftService) *AdminThriftServiceProcessor {

  self278 := &AdminThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self278.processorMap["login"] = &adminThriftServiceProcessorLogin{handler:handler}
  self278.processorMap["login_by_phone"] = &adminThriftServiceProcessorLoginByPhone{handler:handler}
  self278.processorMap["login_by_email"] = &adminThriftServiceProcessorLoginByEmail{handler:handler}
  self278.processorMap["login_by_user_name"] = &adminThriftServiceProcessorLoginByUserName{handler:handler}
  self278.processorMap["register1"] = &adminThriftServiceProcessorRegister1{handler:handler}
  self278.processorMap["register_by_phone"] = &adminThriftServiceProcessorRegisterByPhone{handler:handler}
  self278.processorMap["register_by_email"] = &adminThriftServiceProcessorRegisterByEmail{handler:handler}
  self278.processorMap["register_by_user_name"] = &adminThriftServiceProcessorRegisterByUserName{handler:handler}
  self278.processorMap["get"] = &adminThriftServiceProcessorGet{handler:handler}
  self278.processorMap["update_phone"] = &adminThriftServiceProcessorUpdatePhone{handler:handler}
  self278.processorMap["update_email"] = &adminThriftServiceProcessorUpdateEmail{handler:handler}
  self278.processorMap["update_email_by_phone"] = &adminThriftServiceProcessorUpdateEmailByPhone{handler:handler}
  self278.processorMap["update_pwd_by_phone"] = &adminThriftServiceProcessorUpdatePwdByPhone{handler:handler}
  self278.processorMap["update_pwd_by_email"] = &adminThriftServiceProcessorUpdatePwdByEmail{handler:handler}
  self278.processorMap["update_pwd"] = &adminThriftServiceProcessorUpdatePwd{handler:handler}
  self278.processorMap["exists"] = &adminThriftServiceProcessorExists{handler:handler}
  self278.processorMap["exists_phone"] = &adminThriftServiceProcessorExistsPhone{handler:handler}
  self278.processorMap["exists_email"] = &adminThriftServiceProcessorExistsEmail{handler:handler}
  self278.processorMap["exists_user_name"] = &adminThriftServiceProcessorExistsUserName{handler:handler}
return self278
}

func (p *AdminThriftServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x279 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x279.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x279

}

type adminThriftServiceProcessorLogin struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceLoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceLoginResult{}
  var retval *AdminOuputThrift
  if retval, err2 = p.handler.Login(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorLoginByPhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorLoginByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceLoginByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceLoginByPhoneResult{}
  var retval *AdminOuputThrift
  if retval, err2 = p.handler.LoginByPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorLoginByEmail struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorLoginByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceLoginByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceLoginByEmailResult{}
  var retval *AdminOuputThrift
  if retval, err2 = p.handler.LoginByEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorLoginByUserName struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorLoginByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceLoginByUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceLoginByUserNameResult{}
  var retval *AdminOuputThrift
  if retval, err2 = p.handler.LoginByUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login_by_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "login_by_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorRegister1 struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorRegister1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceRegister1Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceRegister1Result{}
  var retval *IdThrift
  if retval, err2 = p.handler.Register1(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register1: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register1", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register1", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorRegisterByPhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorRegisterByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceRegisterByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceRegisterByPhoneResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorRegisterByEmail struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorRegisterByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceRegisterByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceRegisterByEmailResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorRegisterByUserName struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorRegisterByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceRegisterByUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceRegisterByUserNameResult{}
  var retval *IdThrift
  if retval, err2 = p.handler.RegisterByUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_by_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "register_by_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorGet struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceGetResult{}
  var retval *AdminOuputThrift
  if retval, err2 = p.handler.Get(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdatePhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdatePhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdatePhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdatePhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdateEmail struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdateEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdateEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdateEmailResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdateEmail(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdateEmailByPhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdateEmailByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdateEmailByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdateEmailByPhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdateEmailByPhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_email_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_email_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdatePwdByPhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdatePwdByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdatePwdByPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdatePwdByPhoneResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePwdByPhone(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_pwd_by_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_pwd_by_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdatePwdByEmail struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdatePwdByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdatePwdByEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdatePwdByEmailResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePwdByEmail(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_pwd_by_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_pwd_by_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorUpdatePwd struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorUpdatePwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceUpdatePwdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceUpdatePwdResult{}
  var retval *ResultOuputThrift
  if retval, err2 = p.handler.UpdatePwd(ctx, args.Update); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_pwd: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_pwd", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_pwd", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorExists struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorExists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceExistsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceExistsResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.Exists(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorExistsPhone struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorExistsPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceExistsPhoneArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceExistsPhoneResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsPhone(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_phone: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_phone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_phone", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorExistsEmail struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorExistsEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceExistsEmailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceExistsEmailResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsEmail(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_email: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_email", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_email", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type adminThriftServiceProcessorExistsUserName struct {
  handler AdminThriftService
}

func (p *adminThriftServiceProcessorExistsUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdminThriftServiceExistsUserNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdminThriftServiceExistsUserNameResult{}
  var retval *ExistsOuputThrift
  if retval, err2 = p.handler.ExistsUserName(ctx, args.User); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists_user_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exists_user_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
type AdminThriftServiceLoginArgs struct {
  User *UserInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceLoginArgs() *AdminThriftServiceLoginArgs {
  return &AdminThriftServiceLoginArgs{}
}

var AdminThriftServiceLoginArgs_User_DEFAULT *UserInputThrift
func (p *AdminThriftServiceLoginArgs) GetUser() *UserInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceLoginArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceLoginArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceLoginResult struct {
  Success *AdminOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceLoginResult() *AdminThriftServiceLoginResult {
  return &AdminThriftServiceLoginResult{}
}

var AdminThriftServiceLoginResult_Success_DEFAULT *AdminOuputThrift
func (p *AdminThriftServiceLoginResult) GetSuccess() *AdminOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceLoginByPhoneArgs struct {
  User *UserPhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceLoginByPhoneArgs() *AdminThriftServiceLoginByPhoneArgs {
  return &AdminThriftServiceLoginByPhoneArgs{}
}

var AdminThriftServiceLoginByPhoneArgs_User_DEFAULT *UserPhoneInputThrift
func (p *AdminThriftServiceLoginByPhoneArgs) GetUser() *UserPhoneInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceLoginByPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceLoginByPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceLoginByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserPhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceLoginByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceLoginByPhoneResult struct {
  Success *AdminOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceLoginByPhoneResult() *AdminThriftServiceLoginByPhoneResult {
  return &AdminThriftServiceLoginByPhoneResult{}
}

var AdminThriftServiceLoginByPhoneResult_Success_DEFAULT *AdminOuputThrift
func (p *AdminThriftServiceLoginByPhoneResult) GetSuccess() *AdminOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceLoginByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceLoginByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceLoginByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceLoginByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceLoginByEmailArgs struct {
  User *UserEmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceLoginByEmailArgs() *AdminThriftServiceLoginByEmailArgs {
  return &AdminThriftServiceLoginByEmailArgs{}
}

var AdminThriftServiceLoginByEmailArgs_User_DEFAULT *UserEmailInputThrift
func (p *AdminThriftServiceLoginByEmailArgs) GetUser() *UserEmailInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceLoginByEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceLoginByEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceLoginByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserEmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceLoginByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceLoginByEmailResult struct {
  Success *AdminOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceLoginByEmailResult() *AdminThriftServiceLoginByEmailResult {
  return &AdminThriftServiceLoginByEmailResult{}
}

var AdminThriftServiceLoginByEmailResult_Success_DEFAULT *AdminOuputThrift
func (p *AdminThriftServiceLoginByEmailResult) GetSuccess() *AdminOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceLoginByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceLoginByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceLoginByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceLoginByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceLoginByUserNameArgs struct {
  User *UserUserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceLoginByUserNameArgs() *AdminThriftServiceLoginByUserNameArgs {
  return &AdminThriftServiceLoginByUserNameArgs{}
}

var AdminThriftServiceLoginByUserNameArgs_User_DEFAULT *UserUserNameInputThrift
func (p *AdminThriftServiceLoginByUserNameArgs) GetUser() *UserUserNameInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceLoginByUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceLoginByUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceLoginByUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserUserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceLoginByUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceLoginByUserNameResult struct {
  Success *AdminOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceLoginByUserNameResult() *AdminThriftServiceLoginByUserNameResult {
  return &AdminThriftServiceLoginByUserNameResult{}
}

var AdminThriftServiceLoginByUserNameResult_Success_DEFAULT *AdminOuputThrift
func (p *AdminThriftServiceLoginByUserNameResult) GetSuccess() *AdminOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceLoginByUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceLoginByUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceLoginByUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "login_by_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceLoginByUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceLoginByUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceLoginByUserNameResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceRegister1Args struct {
  User *UserInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceRegister1Args() *AdminThriftServiceRegister1Args {
  return &AdminThriftServiceRegister1Args{}
}

var AdminThriftServiceRegister1Args_User_DEFAULT *UserInputThrift
func (p *AdminThriftServiceRegister1Args) GetUser() *UserInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceRegister1Args_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceRegister1Args) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceRegister1Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegister1Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceRegister1Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegister1Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceRegister1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegister1Args(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceRegister1Result struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceRegister1Result() *AdminThriftServiceRegister1Result {
  return &AdminThriftServiceRegister1Result{}
}

var AdminThriftServiceRegister1Result_Success_DEFAULT *IdThrift
func (p *AdminThriftServiceRegister1Result) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceRegister1Result_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceRegister1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceRegister1Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegister1Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceRegister1Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegister1Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceRegister1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegister1Result(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceRegisterByPhoneArgs struct {
  User *UserPhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceRegisterByPhoneArgs() *AdminThriftServiceRegisterByPhoneArgs {
  return &AdminThriftServiceRegisterByPhoneArgs{}
}

var AdminThriftServiceRegisterByPhoneArgs_User_DEFAULT *UserPhoneInputThrift
func (p *AdminThriftServiceRegisterByPhoneArgs) GetUser() *UserPhoneInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceRegisterByPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceRegisterByPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceRegisterByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserPhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceRegisterByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceRegisterByPhoneResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceRegisterByPhoneResult() *AdminThriftServiceRegisterByPhoneResult {
  return &AdminThriftServiceRegisterByPhoneResult{}
}

var AdminThriftServiceRegisterByPhoneResult_Success_DEFAULT *IdThrift
func (p *AdminThriftServiceRegisterByPhoneResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceRegisterByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceRegisterByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceRegisterByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceRegisterByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceRegisterByEmailArgs struct {
  User *UserEmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceRegisterByEmailArgs() *AdminThriftServiceRegisterByEmailArgs {
  return &AdminThriftServiceRegisterByEmailArgs{}
}

var AdminThriftServiceRegisterByEmailArgs_User_DEFAULT *UserEmailInputThrift
func (p *AdminThriftServiceRegisterByEmailArgs) GetUser() *UserEmailInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceRegisterByEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceRegisterByEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceRegisterByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserEmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceRegisterByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceRegisterByEmailResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceRegisterByEmailResult() *AdminThriftServiceRegisterByEmailResult {
  return &AdminThriftServiceRegisterByEmailResult{}
}

var AdminThriftServiceRegisterByEmailResult_Success_DEFAULT *IdThrift
func (p *AdminThriftServiceRegisterByEmailResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceRegisterByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceRegisterByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceRegisterByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceRegisterByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceRegisterByUserNameArgs struct {
  User *UserUserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceRegisterByUserNameArgs() *AdminThriftServiceRegisterByUserNameArgs {
  return &AdminThriftServiceRegisterByUserNameArgs{}
}

var AdminThriftServiceRegisterByUserNameArgs_User_DEFAULT *UserUserNameInputThrift
func (p *AdminThriftServiceRegisterByUserNameArgs) GetUser() *UserUserNameInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceRegisterByUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceRegisterByUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceRegisterByUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserUserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceRegisterByUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceRegisterByUserNameResult struct {
  Success *IdThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceRegisterByUserNameResult() *AdminThriftServiceRegisterByUserNameResult {
  return &AdminThriftServiceRegisterByUserNameResult{}
}

var AdminThriftServiceRegisterByUserNameResult_Success_DEFAULT *IdThrift
func (p *AdminThriftServiceRegisterByUserNameResult) GetSuccess() *IdThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceRegisterByUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceRegisterByUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceRegisterByUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_by_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceRegisterByUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceRegisterByUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceRegisterByUserNameResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceGetArgs struct {
  User *IdThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceGetArgs() *AdminThriftServiceGetArgs {
  return &AdminThriftServiceGetArgs{}
}

var AdminThriftServiceGetArgs_User_DEFAULT *IdThrift
func (p *AdminThriftServiceGetArgs) GetUser() *IdThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceGetArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceGetArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &IdThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceGetResult struct {
  Success *AdminOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceGetResult() *AdminThriftServiceGetResult {
  return &AdminThriftServiceGetResult{}
}

var AdminThriftServiceGetResult_Success_DEFAULT *AdminOuputThrift
func (p *AdminThriftServiceGetResult) GetSuccess() *AdminOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdatePhoneArgs struct {
  Update *UpdatePhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdatePhoneArgs() *AdminThriftServiceUpdatePhoneArgs {
  return &AdminThriftServiceUpdatePhoneArgs{}
}

var AdminThriftServiceUpdatePhoneArgs_Update_DEFAULT *UpdatePhoneInputThrift
func (p *AdminThriftServiceUpdatePhoneArgs) GetUpdate() *UpdatePhoneInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdatePhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdatePhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdatePhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdatePhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdatePhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdatePhoneResult() *AdminThriftServiceUpdatePhoneResult {
  return &AdminThriftServiceUpdatePhoneResult{}
}

var AdminThriftServiceUpdatePhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdatePhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdatePhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdatePhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdatePhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdatePhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdateEmailArgs struct {
  Update *UpdateEmailInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdateEmailArgs() *AdminThriftServiceUpdateEmailArgs {
  return &AdminThriftServiceUpdateEmailArgs{}
}

var AdminThriftServiceUpdateEmailArgs_Update_DEFAULT *UpdateEmailInputThrift
func (p *AdminThriftServiceUpdateEmailArgs) GetUpdate() *UpdateEmailInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdateEmailArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdateEmailArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdateEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateEmailInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdateEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdateEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdateEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdateEmailResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdateEmailResult() *AdminThriftServiceUpdateEmailResult {
  return &AdminThriftServiceUpdateEmailResult{}
}

var AdminThriftServiceUpdateEmailResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdateEmailResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdateEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdateEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdateEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdateEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdateEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdateEmailResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdateEmailByPhoneArgs struct {
  Update *UpdateEmailByPhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdateEmailByPhoneArgs() *AdminThriftServiceUpdateEmailByPhoneArgs {
  return &AdminThriftServiceUpdateEmailByPhoneArgs{}
}

var AdminThriftServiceUpdateEmailByPhoneArgs_Update_DEFAULT *UpdateEmailByPhoneInputThrift
func (p *AdminThriftServiceUpdateEmailByPhoneArgs) GetUpdate() *UpdateEmailByPhoneInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdateEmailByPhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdateEmailByPhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdateEmailByPhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdateEmailByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdateEmailByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdateEmailByPhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdateEmailByPhoneResult() *AdminThriftServiceUpdateEmailByPhoneResult {
  return &AdminThriftServiceUpdateEmailByPhoneResult{}
}

var AdminThriftServiceUpdateEmailByPhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdateEmailByPhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdateEmailByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdateEmailByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_email_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdateEmailByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdateEmailByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdateEmailByPhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdatePwdByPhoneArgs struct {
  Update *UpdatePwdByPhoneInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdatePwdByPhoneArgs() *AdminThriftServiceUpdatePwdByPhoneArgs {
  return &AdminThriftServiceUpdatePwdByPhoneArgs{}
}

var AdminThriftServiceUpdatePwdByPhoneArgs_Update_DEFAULT *UpdatePwdByPhoneInputThrift
func (p *AdminThriftServiceUpdatePwdByPhoneArgs) GetUpdate() *UpdatePwdByPhoneInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdatePwdByPhoneArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdatePwdByPhoneArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePwdByPhoneInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdatePwdByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdatePwdByPhoneResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdatePwdByPhoneResult() *AdminThriftServiceUpdatePwdByPhoneResult {
  return &AdminThriftServiceUpdatePwdByPhoneResult{}
}

var AdminThriftServiceUpdatePwdByPhoneResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdatePwdByPhoneResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdatePwdByPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdatePwdByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdatePwdByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdByPhoneResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdatePwdByEmailArgs struct {
  Update *UpdatePwdByEmailInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdatePwdByEmailArgs() *AdminThriftServiceUpdatePwdByEmailArgs {
  return &AdminThriftServiceUpdatePwdByEmailArgs{}
}

var AdminThriftServiceUpdatePwdByEmailArgs_Update_DEFAULT *UpdatePwdByEmailInputThrift
func (p *AdminThriftServiceUpdatePwdByEmailArgs) GetUpdate() *UpdatePwdByEmailInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdatePwdByEmailArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdatePwdByEmailArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdatePwdByEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePwdByEmailInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdatePwdByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdatePwdByEmailResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdatePwdByEmailResult() *AdminThriftServiceUpdatePwdByEmailResult {
  return &AdminThriftServiceUpdatePwdByEmailResult{}
}

var AdminThriftServiceUpdatePwdByEmailResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdatePwdByEmailResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdatePwdByEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdatePwdByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdatePwdByEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_by_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdByEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdatePwdByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdByEmailResult(%+v)", *p)
}

// Attributes:
//  - Update
type AdminThriftServiceUpdatePwdArgs struct {
  Update *UpdatePwdInputThrift `thrift:"update,1" db:"update" json:"update"`
}

func NewAdminThriftServiceUpdatePwdArgs() *AdminThriftServiceUpdatePwdArgs {
  return &AdminThriftServiceUpdatePwdArgs{}
}

var AdminThriftServiceUpdatePwdArgs_Update_DEFAULT *UpdatePwdInputThrift
func (p *AdminThriftServiceUpdatePwdArgs) GetUpdate() *UpdatePwdInputThrift {
  if !p.IsSetUpdate() {
    return AdminThriftServiceUpdatePwdArgs_Update_DEFAULT
  }
return p.Update
}
func (p *AdminThriftServiceUpdatePwdArgs) IsSetUpdate() bool {
  return p.Update != nil
}

func (p *AdminThriftServiceUpdatePwdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Update = &UpdatePwdInputThrift{}
  if err := p.Update.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Update), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update: ", p), err) }
  if err := p.Update.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Update), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update: ", p), err) }
  return err
}

func (p *AdminThriftServiceUpdatePwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceUpdatePwdResult struct {
  Success *ResultOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceUpdatePwdResult() *AdminThriftServiceUpdatePwdResult {
  return &AdminThriftServiceUpdatePwdResult{}
}

var AdminThriftServiceUpdatePwdResult_Success_DEFAULT *ResultOuputThrift
func (p *AdminThriftServiceUpdatePwdResult) GetSuccess() *ResultOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceUpdatePwdResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceUpdatePwdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceUpdatePwdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceUpdatePwdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_pwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceUpdatePwdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceUpdatePwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceUpdatePwdResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceExistsArgs struct {
  User *AccountInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceExistsArgs() *AdminThriftServiceExistsArgs {
  return &AdminThriftServiceExistsArgs{}
}

var AdminThriftServiceExistsArgs_User_DEFAULT *AccountInputThrift
func (p *AdminThriftServiceExistsArgs) GetUser() *AccountInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceExistsArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceExistsArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceExistsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &AccountInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceExistsResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceExistsResult() *AdminThriftServiceExistsResult {
  return &AdminThriftServiceExistsResult{}
}

var AdminThriftServiceExistsResult_Success_DEFAULT *ExistsOuputThrift
func (p *AdminThriftServiceExistsResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceExistsResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceExistsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceExistsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceExistsPhoneArgs struct {
  User *PhoneInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceExistsPhoneArgs() *AdminThriftServiceExistsPhoneArgs {
  return &AdminThriftServiceExistsPhoneArgs{}
}

var AdminThriftServiceExistsPhoneArgs_User_DEFAULT *PhoneInputThrift
func (p *AdminThriftServiceExistsPhoneArgs) GetUser() *PhoneInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceExistsPhoneArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceExistsPhoneArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceExistsPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &PhoneInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_phone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceExistsPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceExistsPhoneResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceExistsPhoneResult() *AdminThriftServiceExistsPhoneResult {
  return &AdminThriftServiceExistsPhoneResult{}
}

var AdminThriftServiceExistsPhoneResult_Success_DEFAULT *ExistsOuputThrift
func (p *AdminThriftServiceExistsPhoneResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceExistsPhoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceExistsPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceExistsPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_phone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceExistsPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsPhoneResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceExistsEmailArgs struct {
  User *EmailInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceExistsEmailArgs() *AdminThriftServiceExistsEmailArgs {
  return &AdminThriftServiceExistsEmailArgs{}
}

var AdminThriftServiceExistsEmailArgs_User_DEFAULT *EmailInputThrift
func (p *AdminThriftServiceExistsEmailArgs) GetUser() *EmailInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceExistsEmailArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceExistsEmailArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceExistsEmailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsEmailArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &EmailInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsEmailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_email_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsEmailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceExistsEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceExistsEmailResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceExistsEmailResult() *AdminThriftServiceExistsEmailResult {
  return &AdminThriftServiceExistsEmailResult{}
}

var AdminThriftServiceExistsEmailResult_Success_DEFAULT *ExistsOuputThrift
func (p *AdminThriftServiceExistsEmailResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceExistsEmailResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceExistsEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceExistsEmailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsEmailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsEmailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_email_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsEmailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceExistsEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsEmailResult(%+v)", *p)
}

// Attributes:
//  - User
type AdminThriftServiceExistsUserNameArgs struct {
  User *UserNameInputThrift `thrift:"user,1" db:"user" json:"user"`
}

func NewAdminThriftServiceExistsUserNameArgs() *AdminThriftServiceExistsUserNameArgs {
  return &AdminThriftServiceExistsUserNameArgs{}
}

var AdminThriftServiceExistsUserNameArgs_User_DEFAULT *UserNameInputThrift
func (p *AdminThriftServiceExistsUserNameArgs) GetUser() *UserNameInputThrift {
  if !p.IsSetUser() {
    return AdminThriftServiceExistsUserNameArgs_User_DEFAULT
  }
return p.User
}
func (p *AdminThriftServiceExistsUserNameArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *AdminThriftServiceExistsUserNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsUserNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.User = &UserNameInputThrift{}
  if err := p.User.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsUserNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_user_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsUserNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *AdminThriftServiceExistsUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminThriftServiceExistsUserNameResult struct {
  Success *ExistsOuputThrift `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminThriftServiceExistsUserNameResult() *AdminThriftServiceExistsUserNameResult {
  return &AdminThriftServiceExistsUserNameResult{}
}

var AdminThriftServiceExistsUserNameResult_Success_DEFAULT *ExistsOuputThrift
func (p *AdminThriftServiceExistsUserNameResult) GetSuccess() *ExistsOuputThrift {
  if !p.IsSetSuccess() {
    return AdminThriftServiceExistsUserNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *AdminThriftServiceExistsUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdminThriftServiceExistsUserNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsUserNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExistsOuputThrift{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdminThriftServiceExistsUserNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exists_user_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminThriftServiceExistsUserNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdminThriftServiceExistsUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminThriftServiceExistsUserNameResult(%+v)", *p)
}


