// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: go_user.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Pwd     string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
	Flag    int32  `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"` //1 phone 2 email 3 user_name
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *UserRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type UserPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Pwd   string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *UserPhoneRequest) Reset() {
	*x = UserPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhoneRequest) ProtoMessage() {}

func (x *UserPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhoneRequest.ProtoReflect.Descriptor instead.
func (*UserPhoneRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserPhoneRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type UserEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Pwd   string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *UserEmailRequest) Reset() {
	*x = UserEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmailRequest) ProtoMessage() {}

func (x *UserEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmailRequest.ProtoReflect.Descriptor instead.
func (*UserEmailRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserEmailRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type UserUserNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Pwd      string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *UserUserNameRequest) Reset() {
	*x = UserUserNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUserNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUserNameRequest) ProtoMessage() {}

func (x *UserUserNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUserNameRequest.ProtoReflect.Descriptor instead.
func (*UserUserNameRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserUserNameRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserUserNameRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type AccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Flag    int32  `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"` //1 phone 2 email 3 user_name
}

func (x *AccountRequest) Reset() {
	*x = AccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRequest) ProtoMessage() {}

func (x *AccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRequest.ProtoReflect.Descriptor instead.
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{4}
}

func (x *AccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type PhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *PhoneRequest) Reset() {
	*x = PhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneRequest) ProtoMessage() {}

func (x *PhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneRequest.ProtoReflect.Descriptor instead.
func (*PhoneRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{5}
}

func (x *PhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type EmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *EmailRequest) Reset() {
	*x = EmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailRequest) ProtoMessage() {}

func (x *EmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailRequest.ProtoReflect.Descriptor instead.
func (*EmailRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{6}
}

func (x *EmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UserNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UserNameRequest) Reset() {
	*x = UserNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNameRequest) ProtoMessage() {}

func (x *UserNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNameRequest.ProtoReflect.Descriptor instead.
func (*UserNameRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{7}
}

func (x *UserNameRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UpdatePhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	NewPhone string `protobuf:"bytes,2,opt,name=new_phone,json=newPhone,proto3" json:"new_phone,omitempty"`
}

func (x *UpdatePhoneRequest) Reset() {
	*x = UpdatePhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhoneRequest) ProtoMessage() {}

func (x *UpdatePhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhoneRequest.ProtoReflect.Descriptor instead.
func (*UpdatePhoneRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdatePhoneRequest) GetNewPhone() string {
	if x != nil {
		return x.NewPhone
	}
	return ""
}

type UpdateEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	NewEmail string `protobuf:"bytes,2,opt,name=new_email,json=newEmail,proto3" json:"new_email,omitempty"`
}

func (x *UpdateEmailRequest) Reset() {
	*x = UpdateEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmailRequest) ProtoMessage() {}

func (x *UpdateEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmailRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmailRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateEmailRequest) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

type UpdateEmailByPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *UpdateEmailByPhoneRequest) Reset() {
	*x = UpdateEmailByPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEmailByPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmailByPhoneRequest) ProtoMessage() {}

func (x *UpdateEmailByPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmailByPhoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmailByPhoneRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateEmailByPhoneRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateEmailByPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type UpdatePwdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pwd    string `protobuf:"bytes,1,opt,name=pwd,proto3" json:"pwd,omitempty"`
	NewPwd string `protobuf:"bytes,2,opt,name=new_pwd,json=newPwd,proto3" json:"new_pwd,omitempty"`
}

func (x *UpdatePwdRequest) Reset() {
	*x = UpdatePwdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePwdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePwdRequest) ProtoMessage() {}

func (x *UpdatePwdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePwdRequest.ProtoReflect.Descriptor instead.
func (*UpdatePwdRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePwdRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *UpdatePwdRequest) GetNewPwd() string {
	if x != nil {
		return x.NewPwd
	}
	return ""
}

type UpdatePwdByEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pwd   string `protobuf:"bytes,1,opt,name=pwd,proto3" json:"pwd,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *UpdatePwdByEmailRequest) Reset() {
	*x = UpdatePwdByEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePwdByEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePwdByEmailRequest) ProtoMessage() {}

func (x *UpdatePwdByEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePwdByEmailRequest.ProtoReflect.Descriptor instead.
func (*UpdatePwdByEmailRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePwdByEmailRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *UpdatePwdByEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UpdatePwdByPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pwd   string `protobuf:"bytes,1,opt,name=pwd,proto3" json:"pwd,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *UpdatePwdByPhoneRequest) Reset() {
	*x = UpdatePwdByPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePwdByPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePwdByPhoneRequest) ProtoMessage() {}

func (x *UpdatePwdByPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePwdByPhoneRequest.ProtoReflect.Descriptor instead.
func (*UpdatePwdByPhoneRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePwdByPhoneRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *UpdatePwdByPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

//card_id  card_photo1 card_photo2 hand_card_photo1 hand_card_photo2
type UpdateAuthBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardId         string `protobuf:"bytes,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardPhoto1     string `protobuf:"bytes,3,opt,name=card_photo1,json=cardPhoto1,proto3" json:"card_photo1,omitempty"`
	CardPhoto2     string `protobuf:"bytes,4,opt,name=card_photo2,json=cardPhoto2,proto3" json:"card_photo2,omitempty"`
	HandCardPhoto1 string `protobuf:"bytes,5,opt,name=hand_card_photo1,json=handCardPhoto1,proto3" json:"hand_card_photo1,omitempty"`
	HandCardPhoto2 string `protobuf:"bytes,6,opt,name=hand_card_photo2,json=handCardPhoto2,proto3" json:"hand_card_photo2,omitempty"`
}

func (x *UpdateAuthBasicRequest) Reset() {
	*x = UpdateAuthBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthBasicRequest) ProtoMessage() {}

func (x *UpdateAuthBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuthBasicRequest) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAuthBasicRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateAuthBasicRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *UpdateAuthBasicRequest) GetCardPhoto1() string {
	if x != nil {
		return x.CardPhoto1
	}
	return ""
}

func (x *UpdateAuthBasicRequest) GetCardPhoto2() string {
	if x != nil {
		return x.CardPhoto2
	}
	return ""
}

func (x *UpdateAuthBasicRequest) GetHandCardPhoto1() string {
	if x != nil {
		return x.HandCardPhoto1
	}
	return ""
}

func (x *UpdateAuthBasicRequest) GetHandCardPhoto2() string {
	if x != nil {
		return x.HandCardPhoto2
	}
	return ""
}

type IdGrpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdGrpc) Reset() {
	*x = IdGrpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdGrpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdGrpc) ProtoMessage() {}

func (x *IdGrpc) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdGrpc.ProtoReflect.Descriptor instead.
func (*IdGrpc) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{15}
}

func (x *IdGrpc) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExistsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsReply) Reset() {
	*x = ExistsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsReply) ProtoMessage() {}

func (x *ExistsReply) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsReply.ProtoReflect.Descriptor instead.
func (*ExistsReply) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{16}
}

func (x *ExistsReply) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type ResultReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResultReply) Reset() {
	*x = ResultReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReply) ProtoMessage() {}

func (x *ResultReply) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReply.ProtoReflect.Descriptor instead.
func (*ResultReply) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{17}
}

func (x *ResultReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

//id nicK_name phone email user_name pwd reg_ip login_ip reg_date login_date
//flag msg user_id operator_ip operator_date
type UserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Phone          string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email          string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	UserName       string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Pwd            string `protobuf:"bytes,5,opt,name=pwd,proto3" json:"pwd,omitempty"`
	RegIp          int64  `protobuf:"varint,6,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	LoginIp        int64  `protobuf:"varint,7,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	RegDate        int64  `protobuf:"varint,8,opt,name=reg_date,json=regDate,proto3" json:"reg_date,omitempty"`
	LoginDate      int64  `protobuf:"varint,9,opt,name=login_date,json=loginDate,proto3" json:"login_date,omitempty"`
	CardId         string `protobuf:"bytes,10,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardPhoto1     string `protobuf:"bytes,11,opt,name=card_photo1,json=cardPhoto1,proto3" json:"card_photo1,omitempty"`
	CardPhoto2     string `protobuf:"bytes,12,opt,name=card_photo2,json=cardPhoto2,proto3" json:"card_photo2,omitempty"`
	HandCardPhoto1 string `protobuf:"bytes,13,opt,name=hand_card_photo1,json=handCardPhoto1,proto3" json:"hand_card_photo1,omitempty"`
	HandCardPhoto2 string `protobuf:"bytes,14,opt,name=hand_card_photo2,json=handCardPhoto2,proto3" json:"hand_card_photo2,omitempty"`
}

func (x *UserReply) Reset() {
	*x = UserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReply) ProtoMessage() {}

func (x *UserReply) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReply.ProtoReflect.Descriptor instead.
func (*UserReply) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{18}
}

func (x *UserReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserReply) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *UserReply) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *UserReply) GetLoginIp() int64 {
	if x != nil {
		return x.LoginIp
	}
	return 0
}

func (x *UserReply) GetRegDate() int64 {
	if x != nil {
		return x.RegDate
	}
	return 0
}

func (x *UserReply) GetLoginDate() int64 {
	if x != nil {
		return x.LoginDate
	}
	return 0
}

func (x *UserReply) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *UserReply) GetCardPhoto1() string {
	if x != nil {
		return x.CardPhoto1
	}
	return ""
}

func (x *UserReply) GetCardPhoto2() string {
	if x != nil {
		return x.CardPhoto2
	}
	return ""
}

func (x *UserReply) GetHandCardPhoto1() string {
	if x != nil {
		return x.HandCardPhoto1
	}
	return ""
}

func (x *UserReply) GetHandCardPhoto2() string {
	if x != nil {
		return x.HandCardPhoto2
	}
	return ""
}

type UserBasicReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CardId         string `protobuf:"bytes,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardPhoto1     string `protobuf:"bytes,4,opt,name=card_photo1,json=cardPhoto1,proto3" json:"card_photo1,omitempty"`
	CardPhoto2     string `protobuf:"bytes,5,opt,name=card_photo2,json=cardPhoto2,proto3" json:"card_photo2,omitempty"`
	HandCardPhoto1 string `protobuf:"bytes,6,opt,name=hand_card_photo1,json=handCardPhoto1,proto3" json:"hand_card_photo1,omitempty"`
	HandCardPhoto2 string `protobuf:"bytes,7,opt,name=hand_card_photo2,json=handCardPhoto2,proto3" json:"hand_card_photo2,omitempty"`
}

func (x *UserBasicReply) Reset() {
	*x = UserBasicReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBasicReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBasicReply) ProtoMessage() {}

func (x *UserBasicReply) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBasicReply.ProtoReflect.Descriptor instead.
func (*UserBasicReply) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{19}
}

func (x *UserBasicReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBasicReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBasicReply) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *UserBasicReply) GetCardPhoto1() string {
	if x != nil {
		return x.CardPhoto1
	}
	return ""
}

func (x *UserBasicReply) GetCardPhoto2() string {
	if x != nil {
		return x.CardPhoto2
	}
	return ""
}

func (x *UserBasicReply) GetHandCardPhoto1() string {
	if x != nil {
		return x.HandCardPhoto1
	}
	return ""
}

func (x *UserBasicReply) GetHandCardPhoto2() string {
	if x != nil {
		return x.HandCardPhoto2
	}
	return ""
}

type AdminReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Phone     string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	UserName  string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Pwd       string `protobuf:"bytes,5,opt,name=pwd,proto3" json:"pwd,omitempty"`
	RegIp     int64  `protobuf:"varint,6,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	LoginIp   int64  `protobuf:"varint,7,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	RegDate   int64  `protobuf:"varint,8,opt,name=reg_date,json=regDate,proto3" json:"reg_date,omitempty"`
	LoginDate int64  `protobuf:"varint,9,opt,name=login_date,json=loginDate,proto3" json:"login_date,omitempty"`
}

func (x *AdminReply) Reset() {
	*x = AdminReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminReply) ProtoMessage() {}

func (x *AdminReply) ProtoReflect() protoreflect.Message {
	mi := &file_go_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminReply.ProtoReflect.Descriptor instead.
func (*AdminReply) Descriptor() ([]byte, []int) {
	return file_go_user_proto_rawDescGZIP(), []int{20}
}

func (x *AdminReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AdminReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AdminReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AdminReply) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *AdminReply) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *AdminReply) GetLoginIp() int64 {
	if x != nil {
		return x.LoginIp
	}
	return 0
}

func (x *AdminReply) GetRegDate() int64 {
	if x != nil {
		return x.RegDate
	}
	return 0
}

func (x *AdminReply) GetLoginDate() int64 {
	if x != nil {
		return x.LoginDate
	}
	return 0
}

var File_go_user_proto protoreflect.FileDescriptor

var file_go_user_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77,
	0x64, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x22, 0x44, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x77, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x2e, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x47, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x47, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x3d, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x64, 0x22, 0x41, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x41, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0xe0, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x32, 0x22, 0x18, 0x0a, 0x06, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x0b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x77, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x22, 0xe8,
	0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x31, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x77, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x32,
	0xe5, 0x09, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x12,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12,
	0x3b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x42, 0x0a, 0x15, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x26, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47,
	0x72, 0x70, 0x63, 0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x77, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x1d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x9d, 0x09, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x42, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x12, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63,
	0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4d, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x77, 0x64, 0x12, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x77, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x77, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x42, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x54, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x6c, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x67, 0x6f, 0x75, 0x73, 0x65, 0x72, 0x5a, 0x0c, 0x69, 0x6d, 0x70, 0x6c, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xaa, 0x02, 0x24, 0x43, 0x6f, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_user_proto_rawDescOnce sync.Once
	file_go_user_proto_rawDescData = file_go_user_proto_rawDesc
)

func file_go_user_proto_rawDescGZIP() []byte {
	file_go_user_proto_rawDescOnce.Do(func() {
		file_go_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_user_proto_rawDescData)
	})
	return file_go_user_proto_rawDescData
}

var file_go_user_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_go_user_proto_goTypes = []interface{}{
	(*UserRequest)(nil),               // 0: users.UserRequest
	(*UserPhoneRequest)(nil),          // 1: users.UserPhoneRequest
	(*UserEmailRequest)(nil),          // 2: users.UserEmailRequest
	(*UserUserNameRequest)(nil),       // 3: users.UserUserNameRequest
	(*AccountRequest)(nil),            // 4: users.AccountRequest
	(*PhoneRequest)(nil),              // 5: users.PhoneRequest
	(*EmailRequest)(nil),              // 6: users.EmailRequest
	(*UserNameRequest)(nil),           // 7: users.UserNameRequest
	(*UpdatePhoneRequest)(nil),        // 8: users.UpdatePhoneRequest
	(*UpdateEmailRequest)(nil),        // 9: users.UpdateEmailRequest
	(*UpdateEmailByPhoneRequest)(nil), // 10: users.UpdateEmailByPhoneRequest
	(*UpdatePwdRequest)(nil),          // 11: users.UpdatePwdRequest
	(*UpdatePwdByEmailRequest)(nil),   // 12: users.UpdatePwdByEmailRequest
	(*UpdatePwdByPhoneRequest)(nil),   // 13: users.UpdatePwdByPhoneRequest
	(*UpdateAuthBasicRequest)(nil),    // 14: users.UpdateAuthBasicRequest
	(*IdGrpc)(nil),                    // 15: users.IdGrpc
	(*ExistsReply)(nil),               // 16: users.ExistsReply
	(*ResultReply)(nil),               // 17: users.ResultReply
	(*UserReply)(nil),                 // 18: users.UserReply
	(*UserBasicReply)(nil),            // 19: users.UserBasicReply
	(*AdminReply)(nil),                // 20: users.AdminReply
}
var file_go_user_proto_depIdxs = []int32{
	0,  // 0: users.UserGrpcService.login:input_type -> users.UserRequest
	1,  // 1: users.UserGrpcService.login_by_phone:input_type -> users.UserPhoneRequest
	2,  // 2: users.UserGrpcService.login_by_email:input_type -> users.UserEmailRequest
	3,  // 3: users.UserGrpcService.login_by_user_name:input_type -> users.UserUserNameRequest
	0,  // 4: users.UserGrpcService.register:input_type -> users.UserRequest
	1,  // 5: users.UserGrpcService.register_by_phone:input_type -> users.UserPhoneRequest
	2,  // 6: users.UserGrpcService.register_by_email:input_type -> users.UserEmailRequest
	3,  // 7: users.UserGrpcService.register_by_user_name:input_type -> users.UserUserNameRequest
	15, // 8: users.UserGrpcService.get:input_type -> users.IdGrpc
	15, // 9: users.UserGrpcService.get_auth_basic:input_type -> users.IdGrpc
	8,  // 10: users.UserGrpcService.update_phone:input_type -> users.UpdatePhoneRequest
	9,  // 11: users.UserGrpcService.update_email:input_type -> users.UpdateEmailRequest
	10, // 12: users.UserGrpcService.update_email_by_phone:input_type -> users.UpdateEmailByPhoneRequest
	13, // 13: users.UserGrpcService.update_pwd_by_phone:input_type -> users.UpdatePwdByPhoneRequest
	12, // 14: users.UserGrpcService.update_pwd_by_email:input_type -> users.UpdatePwdByEmailRequest
	14, // 15: users.UserGrpcService.update_auth_basic:input_type -> users.UpdateAuthBasicRequest
	4,  // 16: users.UserGrpcService.exists:input_type -> users.AccountRequest
	5,  // 17: users.UserGrpcService.exists_phone:input_type -> users.PhoneRequest
	6,  // 18: users.UserGrpcService.exists_email:input_type -> users.EmailRequest
	7,  // 19: users.UserGrpcService.exists_user_name:input_type -> users.UserNameRequest
	0,  // 20: users.AdminGrpcService.login:input_type -> users.UserRequest
	1,  // 21: users.AdminGrpcService.login_by_phone:input_type -> users.UserPhoneRequest
	2,  // 22: users.AdminGrpcService.login_by_email:input_type -> users.UserEmailRequest
	3,  // 23: users.AdminGrpcService.login_by_user_name:input_type -> users.UserUserNameRequest
	0,  // 24: users.AdminGrpcService.register:input_type -> users.UserRequest
	1,  // 25: users.AdminGrpcService.register_by_phone:input_type -> users.UserPhoneRequest
	2,  // 26: users.AdminGrpcService.register_by_email:input_type -> users.UserEmailRequest
	3,  // 27: users.AdminGrpcService.register_by_user_name:input_type -> users.UserUserNameRequest
	15, // 28: users.AdminGrpcService.get:input_type -> users.IdGrpc
	8,  // 29: users.AdminGrpcService.update_phone:input_type -> users.UpdatePhoneRequest
	9,  // 30: users.AdminGrpcService.update_email:input_type -> users.UpdateEmailRequest
	10, // 31: users.AdminGrpcService.update_email_by_phone:input_type -> users.UpdateEmailByPhoneRequest
	11, // 32: users.AdminGrpcService.update_pwd:input_type -> users.UpdatePwdRequest
	13, // 33: users.AdminGrpcService.update_pwd_by_phone:input_type -> users.UpdatePwdByPhoneRequest
	12, // 34: users.AdminGrpcService.update_pwd_by_email:input_type -> users.UpdatePwdByEmailRequest
	4,  // 35: users.AdminGrpcService.exists:input_type -> users.AccountRequest
	5,  // 36: users.AdminGrpcService.exists_phone:input_type -> users.PhoneRequest
	6,  // 37: users.AdminGrpcService.exists_email:input_type -> users.EmailRequest
	7,  // 38: users.AdminGrpcService.exists_user_name:input_type -> users.UserNameRequest
	18, // 39: users.UserGrpcService.login:output_type -> users.UserReply
	18, // 40: users.UserGrpcService.login_by_phone:output_type -> users.UserReply
	18, // 41: users.UserGrpcService.login_by_email:output_type -> users.UserReply
	18, // 42: users.UserGrpcService.login_by_user_name:output_type -> users.UserReply
	15, // 43: users.UserGrpcService.register:output_type -> users.IdGrpc
	15, // 44: users.UserGrpcService.register_by_phone:output_type -> users.IdGrpc
	15, // 45: users.UserGrpcService.register_by_email:output_type -> users.IdGrpc
	15, // 46: users.UserGrpcService.register_by_user_name:output_type -> users.IdGrpc
	18, // 47: users.UserGrpcService.get:output_type -> users.UserReply
	14, // 48: users.UserGrpcService.get_auth_basic:output_type -> users.UpdateAuthBasicRequest
	17, // 49: users.UserGrpcService.update_phone:output_type -> users.ResultReply
	17, // 50: users.UserGrpcService.update_email:output_type -> users.ResultReply
	17, // 51: users.UserGrpcService.update_email_by_phone:output_type -> users.ResultReply
	17, // 52: users.UserGrpcService.update_pwd_by_phone:output_type -> users.ResultReply
	17, // 53: users.UserGrpcService.update_pwd_by_email:output_type -> users.ResultReply
	17, // 54: users.UserGrpcService.update_auth_basic:output_type -> users.ResultReply
	16, // 55: users.UserGrpcService.exists:output_type -> users.ExistsReply
	16, // 56: users.UserGrpcService.exists_phone:output_type -> users.ExistsReply
	16, // 57: users.UserGrpcService.exists_email:output_type -> users.ExistsReply
	16, // 58: users.UserGrpcService.exists_user_name:output_type -> users.ExistsReply
	20, // 59: users.AdminGrpcService.login:output_type -> users.AdminReply
	20, // 60: users.AdminGrpcService.login_by_phone:output_type -> users.AdminReply
	20, // 61: users.AdminGrpcService.login_by_email:output_type -> users.AdminReply
	20, // 62: users.AdminGrpcService.login_by_user_name:output_type -> users.AdminReply
	15, // 63: users.AdminGrpcService.register:output_type -> users.IdGrpc
	15, // 64: users.AdminGrpcService.register_by_phone:output_type -> users.IdGrpc
	15, // 65: users.AdminGrpcService.register_by_email:output_type -> users.IdGrpc
	15, // 66: users.AdminGrpcService.register_by_user_name:output_type -> users.IdGrpc
	18, // 67: users.AdminGrpcService.get:output_type -> users.UserReply
	17, // 68: users.AdminGrpcService.update_phone:output_type -> users.ResultReply
	17, // 69: users.AdminGrpcService.update_email:output_type -> users.ResultReply
	17, // 70: users.AdminGrpcService.update_email_by_phone:output_type -> users.ResultReply
	17, // 71: users.AdminGrpcService.update_pwd:output_type -> users.ResultReply
	17, // 72: users.AdminGrpcService.update_pwd_by_phone:output_type -> users.ResultReply
	17, // 73: users.AdminGrpcService.update_pwd_by_email:output_type -> users.ResultReply
	16, // 74: users.AdminGrpcService.exists:output_type -> users.ExistsReply
	16, // 75: users.AdminGrpcService.exists_phone:output_type -> users.ExistsReply
	16, // 76: users.AdminGrpcService.exists_email:output_type -> users.ExistsReply
	16, // 77: users.AdminGrpcService.exists_user_name:output_type -> users.ExistsReply
	39, // [39:78] is the sub-list for method output_type
	0,  // [0:39] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_go_user_proto_init() }
func file_go_user_proto_init() {
	if File_go_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUserNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEmailByPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePwdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePwdByEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePwdByPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdGrpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBasicReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_go_user_proto_goTypes,
		DependencyIndexes: file_go_user_proto_depIdxs,
		MessageInfos:      file_go_user_proto_msgTypes,
	}.Build()
	File_go_user_proto = out.File
	file_go_user_proto_rawDesc = nil
	file_go_user_proto_goTypes = nil
	file_go_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserGrpcServiceClient is the client API for UserGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserGrpcServiceClient interface {
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
	LoginByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*UserReply, error)
	LoginByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserReply, error)
	LoginByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*UserReply, error)
	Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	Get(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UserReply, error)
	GetAuthBasic(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UpdateAuthBasicRequest, error)
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateEmailByPhone(ctx context.Context, in *UpdateEmailByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdatePwdByPhone(ctx context.Context, in *UpdatePwdByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdatePwdByEmail(ctx context.Context, in *UpdatePwdByEmailRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateAuthBasic(ctx context.Context, in *UpdateAuthBasicRequest, opts ...grpc.CallOption) (*ResultReply, error)
	Exists(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsPhone(ctx context.Context, in *PhoneRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsUserName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*ExistsReply, error)
}

type userGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGrpcServiceClient(cc grpc.ClientConnInterface) UserGrpcServiceClient {
	return &userGrpcServiceClient{cc}
}

func (c *userGrpcServiceClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) LoginByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/login_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) LoginByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/login_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) LoginByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/login_by_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) RegisterByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/register_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) RegisterByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/register_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) RegisterByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/register_by_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) Get(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) GetAuthBasic(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UpdateAuthBasicRequest, error) {
	out := new(UpdateAuthBasicRequest)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/get_auth_basic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdateEmailByPhone(ctx context.Context, in *UpdateEmailByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_email_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdatePwdByPhone(ctx context.Context, in *UpdatePwdByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_pwd_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdatePwdByEmail(ctx context.Context, in *UpdatePwdByEmailRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_pwd_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) UpdateAuthBasic(ctx context.Context, in *UpdateAuthBasicRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/update_auth_basic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) Exists(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) ExistsPhone(ctx context.Context, in *PhoneRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/exists_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) ExistsEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/exists_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) ExistsUserName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.UserGrpcService/exists_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcServiceServer is the server API for UserGrpcService service.
type UserGrpcServiceServer interface {
	Login(context.Context, *UserRequest) (*UserReply, error)
	LoginByPhone(context.Context, *UserPhoneRequest) (*UserReply, error)
	LoginByEmail(context.Context, *UserEmailRequest) (*UserReply, error)
	LoginByUserName(context.Context, *UserUserNameRequest) (*UserReply, error)
	Register(context.Context, *UserRequest) (*IdGrpc, error)
	RegisterByPhone(context.Context, *UserPhoneRequest) (*IdGrpc, error)
	RegisterByEmail(context.Context, *UserEmailRequest) (*IdGrpc, error)
	RegisterByUserName(context.Context, *UserUserNameRequest) (*IdGrpc, error)
	Get(context.Context, *IdGrpc) (*UserReply, error)
	GetAuthBasic(context.Context, *IdGrpc) (*UpdateAuthBasicRequest, error)
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*ResultReply, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*ResultReply, error)
	UpdateEmailByPhone(context.Context, *UpdateEmailByPhoneRequest) (*ResultReply, error)
	UpdatePwdByPhone(context.Context, *UpdatePwdByPhoneRequest) (*ResultReply, error)
	UpdatePwdByEmail(context.Context, *UpdatePwdByEmailRequest) (*ResultReply, error)
	UpdateAuthBasic(context.Context, *UpdateAuthBasicRequest) (*ResultReply, error)
	Exists(context.Context, *AccountRequest) (*ExistsReply, error)
	ExistsPhone(context.Context, *PhoneRequest) (*ExistsReply, error)
	ExistsEmail(context.Context, *EmailRequest) (*ExistsReply, error)
	ExistsUserName(context.Context, *UserNameRequest) (*ExistsReply, error)
}

// UnimplementedUserGrpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserGrpcServiceServer struct {
}

func (*UnimplementedUserGrpcServiceServer) Login(context.Context, *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserGrpcServiceServer) LoginByPhone(context.Context, *UserPhoneRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) LoginByEmail(context.Context, *UserEmailRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmail not implemented")
}
func (*UnimplementedUserGrpcServiceServer) LoginByUserName(context.Context, *UserUserNameRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByUserName not implemented")
}
func (*UnimplementedUserGrpcServiceServer) Register(context.Context, *UserRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedUserGrpcServiceServer) RegisterByPhone(context.Context, *UserPhoneRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) RegisterByEmail(context.Context, *UserEmailRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByEmail not implemented")
}
func (*UnimplementedUserGrpcServiceServer) RegisterByUserName(context.Context, *UserUserNameRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByUserName not implemented")
}
func (*UnimplementedUserGrpcServiceServer) Get(context.Context, *IdGrpc) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserGrpcServiceServer) GetAuthBasic(context.Context, *IdGrpc) (*UpdateAuthBasicRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthBasic not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdateEmailByPhone(context.Context, *UpdateEmailByPhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailByPhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdatePwdByPhone(context.Context, *UpdatePwdByPhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwdByPhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdatePwdByEmail(context.Context, *UpdatePwdByEmailRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwdByEmail not implemented")
}
func (*UnimplementedUserGrpcServiceServer) UpdateAuthBasic(context.Context, *UpdateAuthBasicRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthBasic not implemented")
}
func (*UnimplementedUserGrpcServiceServer) Exists(context.Context, *AccountRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedUserGrpcServiceServer) ExistsPhone(context.Context, *PhoneRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsPhone not implemented")
}
func (*UnimplementedUserGrpcServiceServer) ExistsEmail(context.Context, *EmailRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsEmail not implemented")
}
func (*UnimplementedUserGrpcServiceServer) ExistsUserName(context.Context, *UserNameRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsUserName not implemented")
}

func RegisterUserGrpcServiceServer(s *grpc.Server, srv UserGrpcServiceServer) {
	s.RegisterService(&_UserGrpcService_serviceDesc, srv)
}

func _UserGrpcService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/LoginByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).LoginByPhone(ctx, req.(*UserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_LoginByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).LoginByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/LoginByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).LoginByEmail(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_LoginByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).LoginByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/LoginByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).LoginByUserName(ctx, req.(*UserUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).Register(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_RegisterByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).RegisterByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/RegisterByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).RegisterByPhone(ctx, req.(*UserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_RegisterByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).RegisterByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/RegisterByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).RegisterByEmail(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_RegisterByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).RegisterByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/RegisterByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).RegisterByUserName(ctx, req.(*UserUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).Get(ctx, req.(*IdGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_GetAuthBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).GetAuthBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/GetAuthBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).GetAuthBasic(ctx, req.(*IdGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdatePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdateEmailByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdateEmailByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdateEmailByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdateEmailByPhone(ctx, req.(*UpdateEmailByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdatePwdByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdatePwdByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdatePwdByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdatePwdByPhone(ctx, req.(*UpdatePwdByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdatePwdByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdatePwdByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdatePwdByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdatePwdByEmail(ctx, req.(*UpdatePwdByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_UpdateAuthBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).UpdateAuthBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/UpdateAuthBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).UpdateAuthBasic(ctx, req.(*UpdateAuthBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).Exists(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_ExistsPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).ExistsPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/ExistsPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).ExistsPhone(ctx, req.(*PhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_ExistsEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).ExistsEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/ExistsEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).ExistsEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_ExistsUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).ExistsUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserGrpcService/ExistsUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).ExistsUserName(ctx, req.(*UserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.UserGrpcService",
	HandlerType: (*UserGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _UserGrpcService_Login_Handler,
		},
		{
			MethodName: "login_by_phone",
			Handler:    _UserGrpcService_LoginByPhone_Handler,
		},
		{
			MethodName: "login_by_email",
			Handler:    _UserGrpcService_LoginByEmail_Handler,
		},
		{
			MethodName: "login_by_user_name",
			Handler:    _UserGrpcService_LoginByUserName_Handler,
		},
		{
			MethodName: "register",
			Handler:    _UserGrpcService_Register_Handler,
		},
		{
			MethodName: "register_by_phone",
			Handler:    _UserGrpcService_RegisterByPhone_Handler,
		},
		{
			MethodName: "register_by_email",
			Handler:    _UserGrpcService_RegisterByEmail_Handler,
		},
		{
			MethodName: "register_by_user_name",
			Handler:    _UserGrpcService_RegisterByUserName_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserGrpcService_Get_Handler,
		},
		{
			MethodName: "get_auth_basic",
			Handler:    _UserGrpcService_GetAuthBasic_Handler,
		},
		{
			MethodName: "update_phone",
			Handler:    _UserGrpcService_UpdatePhone_Handler,
		},
		{
			MethodName: "update_email",
			Handler:    _UserGrpcService_UpdateEmail_Handler,
		},
		{
			MethodName: "update_email_by_phone",
			Handler:    _UserGrpcService_UpdateEmailByPhone_Handler,
		},
		{
			MethodName: "update_pwd_by_phone",
			Handler:    _UserGrpcService_UpdatePwdByPhone_Handler,
		},
		{
			MethodName: "update_pwd_by_email",
			Handler:    _UserGrpcService_UpdatePwdByEmail_Handler,
		},
		{
			MethodName: "update_auth_basic",
			Handler:    _UserGrpcService_UpdateAuthBasic_Handler,
		},
		{
			MethodName: "exists",
			Handler:    _UserGrpcService_Exists_Handler,
		},
		{
			MethodName: "exists_phone",
			Handler:    _UserGrpcService_ExistsPhone_Handler,
		},
		{
			MethodName: "exists_email",
			Handler:    _UserGrpcService_ExistsEmail_Handler,
		},
		{
			MethodName: "exists_user_name",
			Handler:    _UserGrpcService_ExistsUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_user.proto",
}

// AdminGrpcServiceClient is the client API for AdminGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminGrpcServiceClient interface {
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*AdminReply, error)
	LoginByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*AdminReply, error)
	LoginByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*AdminReply, error)
	LoginByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*AdminReply, error)
	Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	RegisterByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*IdGrpc, error)
	Get(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UserReply, error)
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateEmailByPhone(ctx context.Context, in *UpdateEmailByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdatePwd(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdatePwdByPhone(ctx context.Context, in *UpdatePwdByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdatePwdByEmail(ctx context.Context, in *UpdatePwdByEmailRequest, opts ...grpc.CallOption) (*ResultReply, error)
	Exists(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsPhone(ctx context.Context, in *PhoneRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	ExistsUserName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*ExistsReply, error)
}

type adminGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminGrpcServiceClient(cc grpc.ClientConnInterface) AdminGrpcServiceClient {
	return &adminGrpcServiceClient{cc}
}

func (c *adminGrpcServiceClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*AdminReply, error) {
	out := new(AdminReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) LoginByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*AdminReply, error) {
	out := new(AdminReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/login_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) LoginByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*AdminReply, error) {
	out := new(AdminReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/login_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) LoginByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*AdminReply, error) {
	out := new(AdminReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/login_by_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) RegisterByPhone(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/register_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) RegisterByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/register_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) RegisterByUserName(ctx context.Context, in *UserUserNameRequest, opts ...grpc.CallOption) (*IdGrpc, error) {
	out := new(IdGrpc)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/register_by_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) Get(ctx context.Context, in *IdGrpc, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdateEmailByPhone(ctx context.Context, in *UpdateEmailByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_email_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdatePwd(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_pwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdatePwdByPhone(ctx context.Context, in *UpdatePwdByPhoneRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_pwd_by_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) UpdatePwdByEmail(ctx context.Context, in *UpdatePwdByEmailRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/update_pwd_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) Exists(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) ExistsPhone(ctx context.Context, in *PhoneRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/exists_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) ExistsEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/exists_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcServiceClient) ExistsUserName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/users.AdminGrpcService/exists_user_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminGrpcServiceServer is the server API for AdminGrpcService service.
type AdminGrpcServiceServer interface {
	Login(context.Context, *UserRequest) (*AdminReply, error)
	LoginByPhone(context.Context, *UserPhoneRequest) (*AdminReply, error)
	LoginByEmail(context.Context, *UserEmailRequest) (*AdminReply, error)
	LoginByUserName(context.Context, *UserUserNameRequest) (*AdminReply, error)
	Register(context.Context, *UserRequest) (*IdGrpc, error)
	RegisterByPhone(context.Context, *UserPhoneRequest) (*IdGrpc, error)
	RegisterByEmail(context.Context, *UserEmailRequest) (*IdGrpc, error)
	RegisterByUserName(context.Context, *UserUserNameRequest) (*IdGrpc, error)
	Get(context.Context, *IdGrpc) (*UserReply, error)
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*ResultReply, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*ResultReply, error)
	UpdateEmailByPhone(context.Context, *UpdateEmailByPhoneRequest) (*ResultReply, error)
	UpdatePwd(context.Context, *UpdatePwdRequest) (*ResultReply, error)
	UpdatePwdByPhone(context.Context, *UpdatePwdByPhoneRequest) (*ResultReply, error)
	UpdatePwdByEmail(context.Context, *UpdatePwdByEmailRequest) (*ResultReply, error)
	Exists(context.Context, *AccountRequest) (*ExistsReply, error)
	ExistsPhone(context.Context, *PhoneRequest) (*ExistsReply, error)
	ExistsEmail(context.Context, *EmailRequest) (*ExistsReply, error)
	ExistsUserName(context.Context, *UserNameRequest) (*ExistsReply, error)
}

// UnimplementedAdminGrpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminGrpcServiceServer struct {
}

func (*UnimplementedAdminGrpcServiceServer) Login(context.Context, *UserRequest) (*AdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) LoginByPhone(context.Context, *UserPhoneRequest) (*AdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) LoginByEmail(context.Context, *UserEmailRequest) (*AdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmail not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) LoginByUserName(context.Context, *UserUserNameRequest) (*AdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByUserName not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) Register(context.Context, *UserRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) RegisterByPhone(context.Context, *UserPhoneRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) RegisterByEmail(context.Context, *UserEmailRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByEmail not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) RegisterByUserName(context.Context, *UserUserNameRequest) (*IdGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByUserName not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) Get(context.Context, *IdGrpc) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdateEmailByPhone(context.Context, *UpdateEmailByPhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailByPhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdatePwd(context.Context, *UpdatePwdRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwd not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdatePwdByPhone(context.Context, *UpdatePwdByPhoneRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwdByPhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) UpdatePwdByEmail(context.Context, *UpdatePwdByEmailRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwdByEmail not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) Exists(context.Context, *AccountRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) ExistsPhone(context.Context, *PhoneRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsPhone not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) ExistsEmail(context.Context, *EmailRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsEmail not implemented")
}
func (*UnimplementedAdminGrpcServiceServer) ExistsUserName(context.Context, *UserNameRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsUserName not implemented")
}

func RegisterAdminGrpcServiceServer(s *grpc.Server, srv AdminGrpcServiceServer) {
	s.RegisterService(&_AdminGrpcService_serviceDesc, srv)
}

func _AdminGrpcService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/LoginByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).LoginByPhone(ctx, req.(*UserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_LoginByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).LoginByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/LoginByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).LoginByEmail(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_LoginByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).LoginByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/LoginByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).LoginByUserName(ctx, req.(*UserUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).Register(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_RegisterByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).RegisterByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/RegisterByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).RegisterByPhone(ctx, req.(*UserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_RegisterByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).RegisterByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/RegisterByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).RegisterByEmail(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_RegisterByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).RegisterByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/RegisterByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).RegisterByUserName(ctx, req.(*UserUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).Get(ctx, req.(*IdGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdatePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdateEmailByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdateEmailByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdateEmailByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdateEmailByPhone(ctx, req.(*UpdateEmailByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdatePwd(ctx, req.(*UpdatePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdatePwdByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdatePwdByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdatePwdByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdatePwdByPhone(ctx, req.(*UpdatePwdByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_UpdatePwdByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).UpdatePwdByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/UpdatePwdByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).UpdatePwdByEmail(ctx, req.(*UpdatePwdByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).Exists(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_ExistsPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).ExistsPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/ExistsPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).ExistsPhone(ctx, req.(*PhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_ExistsEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).ExistsEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/ExistsEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).ExistsEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpcService_ExistsUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServiceServer).ExistsUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.AdminGrpcService/ExistsUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServiceServer).ExistsUserName(ctx, req.(*UserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.AdminGrpcService",
	HandlerType: (*AdminGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _AdminGrpcService_Login_Handler,
		},
		{
			MethodName: "login_by_phone",
			Handler:    _AdminGrpcService_LoginByPhone_Handler,
		},
		{
			MethodName: "login_by_email",
			Handler:    _AdminGrpcService_LoginByEmail_Handler,
		},
		{
			MethodName: "login_by_user_name",
			Handler:    _AdminGrpcService_LoginByUserName_Handler,
		},
		{
			MethodName: "register",
			Handler:    _AdminGrpcService_Register_Handler,
		},
		{
			MethodName: "register_by_phone",
			Handler:    _AdminGrpcService_RegisterByPhone_Handler,
		},
		{
			MethodName: "register_by_email",
			Handler:    _AdminGrpcService_RegisterByEmail_Handler,
		},
		{
			MethodName: "register_by_user_name",
			Handler:    _AdminGrpcService_RegisterByUserName_Handler,
		},
		{
			MethodName: "get",
			Handler:    _AdminGrpcService_Get_Handler,
		},
		{
			MethodName: "update_phone",
			Handler:    _AdminGrpcService_UpdatePhone_Handler,
		},
		{
			MethodName: "update_email",
			Handler:    _AdminGrpcService_UpdateEmail_Handler,
		},
		{
			MethodName: "update_email_by_phone",
			Handler:    _AdminGrpcService_UpdateEmailByPhone_Handler,
		},
		{
			MethodName: "update_pwd",
			Handler:    _AdminGrpcService_UpdatePwd_Handler,
		},
		{
			MethodName: "update_pwd_by_phone",
			Handler:    _AdminGrpcService_UpdatePwdByPhone_Handler,
		},
		{
			MethodName: "update_pwd_by_email",
			Handler:    _AdminGrpcService_UpdatePwdByEmail_Handler,
		},
		{
			MethodName: "exists",
			Handler:    _AdminGrpcService_Exists_Handler,
		},
		{
			MethodName: "exists_phone",
			Handler:    _AdminGrpcService_ExistsPhone_Handler,
		},
		{
			MethodName: "exists_email",
			Handler:    _AdminGrpcService_ExistsEmail_Handler,
		},
		{
			MethodName: "exists_user_name",
			Handler:    _AdminGrpcService_ExistsUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_user.proto",
}
